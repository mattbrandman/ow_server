{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"ca",
				"cancelTimer"
			],
			[
				"rea",
				"readyUsers"
			],
			[
				"sta",
				"status"
			],
			[
				"roo",
				"roomName"
			],
			[
				"cu",
				"currentGame"
			],
			[
				"for",
				"for\tfor (…) {…}"
			],
			[
				"us",
				"userId"
			],
			[
				"star",
				"startGame"
			],
			[
				"new",
				"newStatus"
			],
			[
				"team",
				"teamOneSize"
			],
			[
				"tea",
				"teamTwoSize"
			],
			[
				"user",
				"username"
			],
			[
				"ma",
				"matchPromise"
			],
			[
				"fin",
				"findMatchPromise"
			],
			[
				"find",
				"findMatch"
			],
			[
				"Pug",
				"pugGame"
			],
			[
				"ue",
				"userList"
			],
			[
				"cre",
				"createMatch"
			],
			[
				"crea",
				"createMatchJob"
			],
			[
				"qu",
				"queueEntry"
			],
			[
				"q",
				"queueEntry"
			],
			[
				"sock",
				"socketioJwt"
			],
			[
				"secre",
				"secretKey"
			],
			[
				"se",
				"secretOrKey"
			],
			[
				"auth",
				"auth_scheme"
			],
			[
				"jwt",
				"jwtOptions"
			],
			[
				"req",
				"require"
			],
			[
				"res",
				"rest_framework\tmodule"
			],
			[
				"obj",
				"obtain_jwt_token\tstatement"
			],
			[
				"rest_",
				"rest_framework_jwt\tmodule"
			],
			[
				"valid",
				"validated_data\tparam"
			],
			[
				"vali",
				"validated_data\tparam"
			],
			[
				"Pro",
				"ProfileSerializer\tclass"
			],
			[
				"serl",
				"serializer_class\tstatement"
			],
			[
				"mo",
				"ModelViewSet\tclass"
			],
			[
				"view",
				"viewsets\tmodule"
			],
			[
				"pos",
				"post_save\tstatement"
			],
			[
				"Prof",
				"ProfileSerializer\tclass"
			],
			[
				"re",
				"recruit\tscript"
			],
			[
				"Rec",
				"RecruitDetailComponent\talias"
			],
			[
				"recruit",
				"recruit-detail.component\tscript"
			],
			[
				"pr",
				"providers\tproperty"
			],
			[
				"rec",
				"recruitService\tproperty"
			],
			[
				"recruit-c",
				"recruit-list.component\tscript"
			],
			[
				"template",
				"templateUrl\tproperty"
			],
			[
				"hero",
				"heroService\tproperty"
			],
			[
				"origin",
				"origin_server\tparam"
			],
			[
				"geo",
				"geo_info\tstatement"
			],
			[
				"or",
				"origin_server\tstatement"
			],
			[
				"ori",
				"origin_server\tparam"
			],
			[
				"dele",
				"delete_cache_item"
			],
			[
				"curr",
				"current_hash_list\tstatement"
			],
			[
				"cur",
				"current_hash_list\tstatement"
			],
			[
				"cli",
				"client_response\tstatement"
			],
			[
				"cache",
				"cache"
			],
			[
				"net",
				"new_item\tstatement"
			],
			[
				"cac",
				"cache\tstatement"
			],
			[
				"set_ti",
				"set_tight_layout"
			],
			[
				"plot",
				"plot_points\tstatement"
			],
			[
				"set",
				"set_title"
			],
			[
				"err",
				"error_array\tstatement"
			],
			[
				"e",
				"errors\tstatement"
			],
			[
				"sig",
				"sig_array2\tstatement"
			],
			[
				"pure_arra",
				"pure_array2\tstatement"
			],
			[
				"noise_",
				"noise_array2\tstatement"
			],
			[
				"ber",
				"ber_expected\tstatement"
			],
			[
				"get",
				"get_variance"
			],
			[
				"lo",
				"low_index\tstatement"
			],
			[
				"ra",
				"rand_num"
			],
			[
				"cach",
				"cache_usage_list\tstatement"
			],
			[
				"clie",
				"client_socket\tstatement"
			],
			[
				"client",
				"client_socket\tstatement"
			],
			[
				"data",
				"data_array\tstatement"
			],
			[
				"AF",
				"AF_INET\tinstance"
			],
			[
				"redis_",
				"redis_connection\tstatement"
			],
			[
				"redis",
				"Redis\timport"
			],
			[
				"getho",
				"gethostbyname\tfunction"
			],
			[
				"red",
				"redis_connection\tstatement"
			],
			[
				"cl",
				"client_socket\tstatement"
			],
			[
				"a",
				"append\tfunction"
			],
			[
				"is",
				"is_covered\tstatement"
			],
			[
				"AP",
				"AP_list"
			],
			[
				"Ap",
				"AP_list\tstatement"
			],
			[
				"d",
				"does_cover"
			],
			[
				"point",
				"point_y\tstatement"
			],
			[
				"cov",
				"covered_list\tparam"
			],
			[
				"power_array_cu",
				"power_array_current_max"
			],
			[
				"power",
				"power_array_current_min"
			],
			[
				"chann",
				"channel_freq"
			],
			[
				"channel",
				"channel_strength"
			],
			[
				"to",
				"tostring"
			],
			[
				"chan",
				"channel_strength"
			],
			[
				"tcp",
				"tcpreceived\tstatement"
			],
			[
				"flo",
				"flow1_drops\tstatement"
			],
			[
				"flow",
				"flow2_drops\tstatement"
			],
			[
				"tot",
				"total_latency2"
			],
			[
				"bandwidth",
				"bandwidth2"
			],
			[
				"cbr",
				"cbrRate"
			],
			[
				"curre",
				"current_bandwidth\tstatement"
			],
			[
				"drop",
				"dropped_packets\tstatement"
			],
			[
				"trace",
				"trace_file\tstatement"
			],
			[
				"date",
				"date_of_installation"
			],
			[
				"Date",
				"DateField\tclass"
			],
			[
				"arm_si",
				"arm_size_confirmed"
			],
			[
				"arm",
				"ARM_SIZE_CHOICES\tstatement"
			],
			[
				"inst",
				"installer_contact_information"
			],
			[
				"sy",
				"styleUrls\tproperty"
			],
			[
				"const",
				"constructor\tkeyword"
			],
			[
				"Route",
				"RouteConfig\talias"
			],
			[
				"Her",
				"HeroService\talias"
			],
			[
				"Rout",
				"ROUTER_PROVIDERS\talias"
			],
			[
				"set_",
				"set_password"
			],
			[
				"chapt",
				"chapter_name"
			],
			[
				"Dom",
				"DomainMixin"
			],
			[
				"chap",
				"chapter_name"
			],
			[
				"can",
				"can_respond_to_get\tstatement"
			],
			[
				"CH",
				"FILL_CHUNK_SIZE"
			],
			[
				"raw",
				"raw_msg\tstatement"
			],
			[
				"msg",
				"msg_raw\tstatement"
			],
			[
				"prevl",
				"prevLogTerm\tstatement"
			],
			[
				"prev",
				"prevLogTerm"
			],
			[
				"time",
				"timeoutlength\tstatement"
			],
			[
				"current",
				"currentterm"
			],
			[
				"hear",
				"hearFromLeader\tstatement"
			],
			[
				"pre",
				"prevLogIndex\tstatement"
			],
			[
				"cutt",
				"currentterm\tstatement"
			],
			[
				"tran",
				"transactionlog\tstatement"
			],
			[
				"tra",
				"transactionlog\tstatement"
			]
		]
	},
	"buffers":
	[
		{
			"file": "routes/index.js",
			"settings":
			{
				"buffer_size": 3262,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "app.js",
			"settings":
			{
				"buffer_size": 2393,
				"line_ending": "Unix"
			}
		},
		{
			"file": "game-code/pug-game.js",
			"settings":
			{
				"buffer_size": 3645,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "models/match.js",
			"settings":
			{
				"buffer_size": 645,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "routes/match.js",
			"settings":
			{
				"buffer_size": 505,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "routes/users.js",
			"settings":
			{
				"buffer_size": 242,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 15380 files for \"ObjectID\"\n\n/Users/matthewbrandman/ow_server/game-code/pug-game.js:\n   10  \t\tvar socket = socket\n   11  \t\tvar player = {\n   12: \t\t\tuserID: new mongoose.mongo.ObjectId(user.id),\n   13  \t\t\tusername: user.username,\n   14  \t\t\tteam: 1\n   ..\n   45  \t\tvar user = socket.decoded_token\n   46  \t\tvar player = {\n   47: \t\t\tuserID: new mongoose.mongo.ObjectId(user.id),\n   48  \t\t\tusername: user.username,\n   49  \t\t\tteam: 1\n   ..\n   56  \t  \t\tconsole.log('The raw response from Mongo was ', raw);\n   57  \t  \t\tconsole.log(user.id);\n   58: \t  \t\tvar x = new mongoose.mongo.ObjectId(user.id)\n   59  \t  \t\tUser.updateAsync({_id: user.id}, {status: 'inQueue', currentGame: match.roomName}).then(\n   60  \t  \t\t\tfunction(data){\n\n/Users/matthewbrandman/ow_server/models/match.js:\n    9  \t  \t[\n   10  \t\t  \t{\n   11: \t\t  \t\tuserID: {type: Schema.Types.ObjectId, ref: 'User'}, \n   12  \t\t  \t\tusername: {type: String, required: true},\n   13  \t\t  \t\tvote: {type: Number, enum: [-1, 0, 1, 2], default: -1},\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/History.md:\n  541   * fix(query): support minDistance with query casting and `.near()` #4179\n  542   * fix(model): remove unnecessary .save() promise #4177\n  543:  * fix(schema): cast all valid ObjectId strings to object ids #3365\n  544   * docs: remove unclear \"unsafe\" term in query docs #3282\n  545  \n  ...\n 1168  4.0.5 / 2015-06-05\n 1169  ==================\n 1170:  * fixed; ObjectIds and buffers when mongodb driver is a sibling dependency #3050 #3048 #3040 #3031 #3020 #2988 #2951\n 1171   * fixed; warn user when 'increment' is used in schema #3039\n 1172   * fixed; setDefaultsOnInsert with array in schema #3035\n ....\n 1306   * added; ability to exclude version key in toObject() #2675\n 1307   * fixed; dont allow setting nested path to a string #2592\n 1308:  * fixed; can cast objects with _id field to ObjectIds #2581\n 1309   * fixed; on-the-fly schema getters #2360\n 1310   * added; strict option for findOneAndUpdate() #1967\n ....\n 2110    * fixed; can now deselect populated doc _ids #1331\n 2111    * fixed; properly pass subtype to Binary in MongooseBuffer\n 2112:   * fixed; casting _id from document with non-ObjectId _id\n 2113    * fixed; specifying schema type edge case { path: [{type: \"String\" }] }\n 2114    * fixed; typo in schemdate #1329 [jplock](https://github.com/jplock)\n ....\n 2190    * changed; Buffer arrays can now contain nulls\n 2191    * fixed; properly pass subtype to Binary in MongooseBuffer\n 2192:   * fixed; casting _id from document with non-ObjectId _id\n 2193    * fixed; specifying schema type edge case { path: [{type: \"String\" }] }\n 2194    * fixed; typo in schemdate #1329 [jplock](https://github.com/jplock)\n ....\n 2439    * fixed; expires schema option helper #1132\n 2440    * fixed; built in string setters #1131\n 2441:   * fixed; debug output for Dates/ObjectId properties #1129\n 2442    * docs; fixed Javascript syntax error in example [olalonde](https://github.com/olalonde)\n 2443    * docs; fix toJSON example #1137\n ....\n 2483    * fixed; querystream never resumes when paused at getMore boundries #1092\n 2484    * fixed; querystream occasionally emits data events after destroy #1092\n 2485:   * fixed; remove unnecessary ObjectId creation in querystream\n 2486    * fixed; allow ne(boolean) again #1093\n 2487    * docs; add populate/field selection syntax notes\n ....\n 2568    * fixed; creating object from model with emded object no longer overwrites defaults [achurkin] (#859)\n 2569    * fixed; stop needless validation of unchanged/unselected fields (#891)\n 2570:   * fixed; document#equals behavior of objectids (#974)\n 2571    * fixed; honor the minimize schema option (#978)\n 2572    * fixed; provide helpful error msgs when reserved schema path is used (#928)\n ....\n 2616    * fixed; do not save virtuals during model.update (#894)\n 2617    * fixed; sub doc toObject virtuals application (#889)\n 2618:   * fixed; MongooseArray#pull of ObjectId (#881)\n 2619    * fixed; handle passing db name with any repl set string\n 2620    * fixed; default application of selected fields (#870)\n ....\n 2729    * updated; driver to 1.0.0\n 2730    * fixed; virtuals application of subdocs when using toObject({ virtuals: true }) (#889)\n 2731:   * fixed; MongooseArray#pull of ObjectId correctly updates the array itself (#881)\n 2732  \n 2733  2.6.2 / 2012-04-30\n ....\n 2852    * added; doc.toJSON calls toJSON on embedded docs when exists [jerem]\n 2853    * added; populate support for refs of type Buffer (#686) [jerem]\n 2854:   * added; $all support for ObjectIds and Dates (#690)\n 2855    * fixed; virtual setter calling on instantiation when strict: true (#682) [hunterloftis]\n 2856    * fixed; doc construction triggering getters (#685)\n ....\n 3109  ==================\n 3110  \n 3111:   * Fixed; Only send the depopulated ObjectId instead of the entire doc on save (DBRefs)\n 3112    * Fixed; Properly cast nested array values in Model.update (the data was stored in Mongo incorrectly but recast on document fetch was \"fixing\" it)\n 3113  \n ....\n 3168  ===================\n 3169  \n 3170:   * fixed; ObjectIds were always marked modified\n 3171    * fixed; can now query using document instances\n 3172    * fixed; can now query/update using documents with subdocs\n ....\n 3192  ===================\n 3193  \n 3194:   * fixed; MongooseArray#indexOf now works with ObjectIds\n 3195    * fixed; validation scope now set properly (#418)\n 3196    * fixed; added missing colors dependency (#398)\n ....\n 3213    * fixed; MongooseArray behaves properly with Object.keys\n 3214    * changed; node-mongodb-native driver to v0.9.6.6\n 3215:   * fixed/changed; Mongodb segfault when passed invalid ObjectId (#407)\n 3216:       - This means invalid data passed to the ObjectId constructor will now error\n 3217  \n 3218  1.6.0 / 2011-07-07\n ....\n 3236    * fixed; two memory leaks (@justmoon)\n 3237    * added; sparse index support\n 3238:   * added; more ObjectId conditionals (gt, lt, gte, lte) (@phillyqueso)\n 3239    * added; options are now passed in model#remote (@JerryLuke)\n 3240  \n ....\n 3473    * Added SchemaType String `lowercase`, `uppercase`, `trim`.\n 3474    * Public exports (`Model`, `Document`) and tests.\n 3475:   * Added ObjectId casting support for `Document`s.\n 3476  \n 3477  1.1.0 / 2011-02-25\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/README.md:\n   67  ```js\n   68  var Schema = mongoose.Schema,\n   69:     ObjectId = Schema.ObjectId;\n   70  \n   71  var BlogPost = new Schema({\n   72:     author    : ObjectId,\n   73      title     : String,\n   74      body      : String,\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/examples/population/population-across-three-collections.js:\n    3  var mongoose = require('../../lib');\n    4  var Schema = mongoose.Schema;\n    5: var ObjectId = mongoose.Types.ObjectId;\n    6  \n    7  /**\n    .\n   22    name: String,\n   23    friends: [{\n   24:     type: Schema.ObjectId,\n   25      ref: 'User'\n   26    }]\n   ..\n   32    tags: [String],\n   33    author: {\n   34:     type: Schema.ObjectId,\n   35      ref: 'User'\n   36    }\n   ..\n   47     */\n   48  \n   49:   var userIds = [new ObjectId, new ObjectId, new ObjectId, new ObjectId];\n   50    var users = [];\n   51  \n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/examples/population/population-basic.js:\n   25    released: Date,\n   26    consoles: [{\n   27:     type: Schema.Types.ObjectId,\n   28      ref: 'Console'\n   29    }]\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/examples/population/population-of-existing-doc.js:\n   25    released: Date,\n   26    consoles: [{\n   27:     type: Schema.Types.ObjectId,\n   28      ref: 'Console'\n   29    }]\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/examples/population/population-of-multiple-existing-docs.js:\n   25    released: Date,\n   26    consoles: [{\n   27:     type: Schema.Types.ObjectId,\n   28      ref: 'Console'\n   29    }]\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/examples/population/population-options.js:\n   25    released: Date,\n   26    consoles: [{\n   27:     type: Schema.Types.ObjectId,\n   28      ref: 'Console'\n   29    }]\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/examples/population/population-plain-objects.js:\n   25    released: Date,\n   26    consoles: [{\n   27:     type: Schema.Types.ObjectId,\n   28      ref: 'Console'\n   29    }]\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/examples/schema/schema.js:\n   37    buf: Buffer,\n   38    comments: [Comment],\n   39:   creator: Schema.ObjectId\n   40  });\n   41  \n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/examples/schema/storing-schemas-as-json/schema.json:\n    6    \"created\": \"date\",\n    7    \"additive\": \"boolean\",\n    8:   \"user_id\": \"ObjectId\"\n    9  }\n   10  \n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/lib/aggregate.js:\n   33   * - The documents returned are plain javascript objects, not mongoose documents (since any shape of document can be returned).\n   34   * - Requires MongoDB >= 2.1\n   35:  * - Mongoose does **not** cast pipeline stages. `new Aggregate({ $match: { _id: '00000000000000000000000a' } });` will not work unless `_id` is a string in the database. Use `new Aggregate({ $match: { _id: mongoose.Types.ObjectId('00000000000000000000000a') } });` instead.\n   36   *\n   37   * @see MongoDB http://docs.mongodb.org/manual/applications/aggregation/\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/lib/browser.js:\n   62   * ####Types:\n   63   *\n   64:  * - [ObjectId](#types-objectid-js)\n   65   * - [Buffer](#types-buffer-js)\n   66   * - [SubDocument](#types-embedded-js)\n   ..\n   68   * - [DocumentArray](#types-documentarray-js)\n   69   *\n   70:  * Using this exposed access to the `ObjectId` type, we can construct ids on demand.\n   71   *\n   72:  *     var ObjectId = mongoose.Types.ObjectId;\n   73:  *     var id1 = new ObjectId;\n   74   *\n   75   * @property Types\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/lib/browserDocument.js:\n    7  var MongooseError = require('./error');\n    8  var Schema = require('./schema');\n    9: var ObjectId = require('./types/objectid');\n   10  var utils = require('./utils');\n   11  var ValidationError = MongooseError.ValidationError;\n   ..\n   21   * @param {Object} obj the values to set\n   22   * @param {Object} [fields] optional object containing the fields which were selected in the query returning this document and any populated paths data\n   23:  * @param {Boolean} [skipId] bool, should we auto create an ObjectId _id\n   24   * @inherits NodeJS EventEmitter http://nodejs.org/api/events.html#events_class_events_eventemitter\n   25   * @event `init`: Emitted on a document after it has was retrieved from the db and fully hydrated by Mongoose.\n   ..\n   41    schema = this.schema || schema;\n   42  \n   43:   // Generate ObjectId if it is missing, but it requires a scheme\n   44    if (!this.schema && schema.options._id) {\n   45      obj = obj || {};\n   46  \n   47      if (obj._id === undefined) {\n   48:       obj._id = new ObjectId();\n   49      }\n   50    }\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/lib/connection.js:\n  283   * ####Notes:\n  284   *\n  285:  * Mongoose forces the db option `forceServerObjectId` false and cannot be overridden.\n  286   * Mongoose defaults the server `auto_reconnect` options to true which can be overridden.\n  287   * See the node-mongodb-native driver instance for options that it understands.\n  ...\n  547   *     conn.open('mongodb://mongosA:27501,mongosB:27501', { mongos: true }, cb);\n  548   *\n  549:  * Mongoose forces the db option `forceServerObjectId` false and cannot be overridden.\n  550   * Mongoose defaults the server `auto_reconnect` options to true which can be overridden.\n  551   * See the node-mongodb-native driver instance for options that it understands.\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/lib/document.js:\n   30   * @param {Object} obj the values to set\n   31   * @param {Object} [fields] optional object containing the fields which were selected in the query returning this document and any populated paths data\n   32:  * @param {Boolean} [skipId] bool, should we auto create an ObjectId _id\n   33   * @inherits NodeJS EventEmitter http://nodejs.org/api/events.html#events_class_events_eventemitter\n   34   * @event `init`: Emitted on a document after it has was retreived from the db and fully hydrated by Mongoose.\n   ..\n  559      if (path[key] !== null\n  560          && path[key] !== void 0\n  561:           // need to know if plain object - no Buffer, ObjectId, ref, etc\n  562          && utils.isObject(path[key])\n  563          && (!path[key].constructor || utils.getFunctionName(path[key].constructor) === 'Object')\n  ...\n 2545   *\n 2546   * @param {String} path\n 2547:  * @return {Array|ObjectId|Number|Buffer|String|undefined}\n 2548   * @api public\n 2549   */\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/lib/index.js:\n  647   * ####Types:\n  648   *\n  649:  * - [ObjectId](#types-objectid-js)\n  650   * - [Buffer](#types-buffer-js)\n  651   * - [SubDocument](#types-embedded-js)\n  ...\n  653   * - [DocumentArray](#types-documentarray-js)\n  654   *\n  655:  * Using this exposed access to the `ObjectId` type, we can construct ids on demand.\n  656   *\n  657:  *     var ObjectId = mongoose.Types.ObjectId;\n  658:  *     var id1 = new ObjectId;\n  659   *\n  660   * @property Types\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/lib/model.js:\n  131        // what to update later if more changes are made. the user\n  132        // wouldn't know what _id was generated by mongodb either\n  133:       // nor would the ObjectId generated my mongodb necessarily\n  134        // match the schema definition.\n  135        setTimeout(function() {\n  ...\n 2863   *     // new Schema({\n 2864   *     //   name: String,\n 2865:  *     //   weapon: { type: ObjectId, ref: 'Weapon' }\n 2866   *     // });\n 2867   *\n ....\n 3555    }\n 3556  \n 3557:   if (doc.constructor.name === 'ObjectID') {\n 3558      return false;\n 3559    }\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/lib/schema.js:\n  110    if (auto_id) {\n  111      var _obj = {_id: {auto: true}};\n  112:     _obj._id[this.options.typeKey] = Schema.ObjectId;\n  113      this.add(_obj);\n  114    }\n  ...\n  284   * ####Example:\n  285   *     {\n  286:  *         '_id'     : ObjectId\n  287   *       , 'nested'  : {\n  288   *             'key' : String\n  ...\n 1808   *\n 1809   *     var mongoose = require('mongoose');\n 1810:  *     var ObjectId = mongoose.Schema.Types.ObjectId;\n 1811   *\n 1812   * ####Types:\n ....\n 1818   * - [Buffer](#schema-buffer-js)\n 1819   * - [Date](#schema-date-js)\n 1820:  * - [ObjectId](#schema-objectid-js) | Oid\n 1821   * - [Mixed](#schema-mixed-js)\n 1822   *\n ....\n 1835   */\n 1836  \n 1837: exports.ObjectId = MongooseTypes.ObjectId;\n 1838  \n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/lib/schematype.js:\n  509   *\n  510   *     var s = new Schema({\n  511:  *       userId: ObjectId,\n  512   *       username: {\n  513   *         type: String,\n  ...\n  518   *     // or with a function and a custom message\n  519   *     var s = new Schema({\n  520:  *       userId: ObjectId,\n  521   *       username: {\n  522   *         type: String,\n  ...\n  554   * @see SchemaBuffer#checkRequired #schema_buffer_SchemaBuffer.schemaName\n  555   * @see SchemaNumber#checkRequired #schema_number_SchemaNumber-min\n  556:  * @see SchemaObjectId#checkRequired #schema_objectid_ObjectId-auto\n  557   * @see SchemaString#checkRequired #schema_string_SchemaString-checkRequired\n  558   * @api public\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/lib/utils.js:\n    4  \n    5  var Decimal = require('./types/decimal128');\n    6: var ObjectId = require('./types/objectid');\n    7  var cloneRegExp = require('regexp-clone');\n    8  var sliced = require('sliced');\n    .\n  148    }\n  149  \n  150:   if ((a instanceof ObjectId && b instanceof ObjectId) ||\n  151        (a instanceof Decimal && b instanceof Decimal)) {\n  152      return a.toString() === b.toString();\n  ...\n  269    }\n  270  \n  271:   if (obj instanceof ObjectId) {\n  272:     return new ObjectId(obj.id);\n  273    }\n  274    if (obj instanceof Decimal) {\n  ...\n  750   *\n  751   * [1, 2, 3, 3, 5] => [1, 2, 3, 5]\n  752:  * [ ObjectId(\"550988ba0c19d57f697dc45e\"), ObjectId(\"550988ba0c19d57f697dc45e\") ]\n  753:  *    => [ObjectId(\"550988ba0c19d57f697dc45e\")]\n  754   *\n  755   * @param {Array} arr\n  ...\n  770        ret.push(arr[i]);\n  771        primitives[arr[i]] = true;\n  772:     } else if (arr[i] instanceof ObjectId) {\n  773        if (ids[arr[i].toString()]) {\n  774          continue;\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/lib/drivers/browser/index.js:\n    4  \n    5  exports.Binary = require('./binary');\n    6: exports.ObjectId = require('./objectid');\n    7  exports.ReadPreference = require('./ReadPreference');\n    8  \n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/lib/drivers/browser/objectid.js:\n    1  \n    2  /*!\n    3:  * [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) ObjectId\n    4:  * @constructor NodeMongoDbObjectId\n    5:  * @see ObjectId\n    6   */\n    7  \n    8: var ObjectId = require('bson').ObjectID;\n    9  \n   10  /*!\n   ..\n   12   */\n   13  \n   14: module.exports = exports = ObjectId;\n   15  \n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/lib/drivers/node-mongodb-native/collection.js:\n  193    return format(o, true);\n  194  }\n  195: function formatObjectId(x, key) {\n  196:   var representation = 'ObjectId(\"' + x[key].toHexString() + '\")';\n  197    x[key] = {inspect: function() { return representation; }};\n  198  }\n  ...\n  211      if (x.constructor.name === 'Binary') {\n  212        x = 'BinData(' + x.sub_type + ', \"' + x.toString('base64') + '\")';\n  213:     } else if (x.constructor.name === 'ObjectID') {\n  214:       representation = 'ObjectId(\"' + x.toHexString() + '\")';\n  215        x = {inspect: function() { return representation; }};\n  216      } else if (x.constructor.name === 'Date') {\n  ...\n  232            } else if (x[key].constructor.name === 'Object') {\n  233              x[key] = format(x[key], true);\n  234:           } else if (x[key].constructor.name === 'ObjectID') {\n  235:             formatObjectId(x, key);\n  236            } else if (x[key].constructor.name === 'Date') {\n  237              formatDate(x, key);\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/lib/drivers/node-mongodb-native/connection.js:\n  352    }\n  353  \n  354:   // mongoose creates its own ObjectIds\n  355:   o.db.forceServerObjectId = false;\n  356  \n  357    // default safe using new nomenclature\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/lib/drivers/node-mongodb-native/index.js:\n    4  \n    5  exports.Binary = require('./binary');\n    6: exports.ObjectId = require('./objectid');\n    7  exports.ReadPreference = require('./ReadPreference');\n    8  \n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/lib/drivers/node-mongodb-native/objectid.js:\n    1  \n    2  /*!\n    3:  * [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) ObjectId\n    4:  * @constructor NodeMongoDbObjectId\n    5:  * @see ObjectId\n    6   */\n    7  \n    8: var ObjectId = require('mongodb').ObjectId;\n    9  \n   10  /*!\n   ..\n   12   */\n   13  \n   14: module.exports = exports = ObjectId;\n   15  \n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/lib/schema/array.js:\n   12    Number: require('./number'),\n   13    String: require('./string'),\n   14:   ObjectId: require('./objectid'),\n   15    Buffer: require('./buffer')\n   16  };\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/lib/schema/index.js:\n   20  exports.Date = require('./date');\n   21  \n   22: exports.ObjectId = require('./objectid');\n   23  \n   24  exports.Mixed = require('./mixed');\n   ..\n   28  // alias\n   29  \n   30: exports.Oid = exports.ObjectId;\n   31  exports.Object = exports.Mixed;\n   32  exports.Bool = exports.Boolean;\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/lib/schema/objectid.js:\n    7  var SchemaType = require('../schematype'),\n    8      CastError = SchemaType.CastError,\n    9:     oid = require('../types/objectid'),\n   10      utils = require('../utils'),\n   11      Document;\n   12  \n   13  /**\n   14:  * ObjectId SchemaType constructor.\n   15   *\n   16   * @param {String} key\n   ..\n   20   */\n   21  \n   22: function ObjectId(key, options) {\n   23:   SchemaType.call(this, key, options, 'ObjectID');\n   24  }\n   25  \n   ..\n   30   * @api public\n   31   */\n   32: ObjectId.schemaName = 'ObjectId';\n   33  \n   34  /*!\n   35   * Inherits from SchemaType.\n   36   */\n   37: ObjectId.prototype = Object.create(SchemaType.prototype);\n   38: ObjectId.prototype.constructor = ObjectId;\n   39  \n   40  /**\n   41:  * Adds an auto-generated ObjectId default if turnOn is true.\n   42:  * @param {Boolean} turnOn auto generated ObjectId defaults\n   43   * @api public\n   44   * @return {SchemaType} this\n   45   */\n   46  \n   47: ObjectId.prototype.auto = function(turnOn) {\n   48    if (turnOn) {\n   49      this.default(defaultId);\n   ..\n   63   */\n   64  \n   65: ObjectId.prototype.checkRequired = function checkRequired(value, doc) {\n   66    if (SchemaType._isRef(this, value, doc, true)) {\n   67      return !!value;\n   ..\n   71  \n   72  /**\n   73:  * Casts to ObjectId\n   74   *\n   75   * @param {Object} value\n   ..\n   79   */\n   80  \n   81: ObjectId.prototype.cast = function(value, doc, init) {\n   82    if (SchemaType._isRef(this, value, doc, init)) {\n   83      // wait! we may need to cast this to a document\n   ..\n   99        return value;\n  100      } else if (Buffer.isBuffer(value) || !utils.isObject(value)) {\n  101:       throw new CastError('ObjectId', value, this.path);\n  102      }\n  103  \n  ...\n  145        return new oid(value.toString());\n  146      } catch (err) {\n  147:       throw new CastError('ObjectId', value, this.path);\n  148      }\n  149    }\n  150  \n  151:   throw new CastError('ObjectId', value, this.path);\n  152  };\n  153  \n  ...\n  160  }\n  161  \n  162: ObjectId.prototype.$conditionalHandlers =\n  163      utils.options(SchemaType.prototype.$conditionalHandlers, {\n  164        $gt: handleSingle,\n  ...\n  176   */\n  177  \n  178: ObjectId.prototype.castForQuery = function($conditional, val) {\n  179    var handler;\n  180    if (arguments.length === 2) {\n  181      handler = this.$conditionalHandlers[$conditional];\n  182      if (!handler) {\n  183:       throw new Error('Can\\'t use ' + $conditional + ' with ObjectId.');\n  184      }\n  185      return handler.call(this, val);\n  ...\n  205   */\n  206  \n  207: module.exports = ObjectId;\n  208  \n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/lib/services/common.js:\n    5   */\n    6  \n    7: var ObjectId = require('../types/objectid');\n    8  var utils = require('../utils');\n    9  \n   ..\n   82      typeof val === 'object' &&\n   83      !(val instanceof Date) &&\n   84:     !(val instanceof ObjectId) &&\n   85      (!Array.isArray(val) || val.length > 0) &&\n   86      !(val instanceof Buffer);\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/lib/services/query/castUpdate.js:\n  260    if (cond) {\n  261      // Cast values for ops that add data to MongoDB.\n  262:     // Ensures embedded documents get ObjectIds etc.\n  263      var tmp = schema.cast(val);\n  264      if (Array.isArray(val)) {\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/lib/types/array.js:\n    5  var EmbeddedDocument = require('./embedded');\n    6  var Document = require('../document');\n    7: var ObjectId = require('./objectid');\n    8  var utils = require('../utils');\n    9  var isMongooseObject = utils.isMongooseObject;\n   ..\n  109        // non-objects are to be interpreted as _id\n  110        if (Buffer.isBuffer(value) ||\n  111:           value instanceof ObjectId || !utils.isObject(value)) {\n  112          value = {_id: value};\n  113        }\n  ...\n  487     * ####Examples:\n  488     *\n  489:    *     doc.array.pull(ObjectId)\n  490     *     doc.array.pull({ _id: 'someId' })\n  491     *     doc.array.pull(36)\n  ...\n  750  \n  751    indexOf: function indexOf(obj) {\n  752:     if (obj instanceof ObjectId) {\n  753        obj = obj.toString();\n  754      }\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/lib/types/decimal128.js:\n    1  /**\n    2:  * ObjectId type constructor\n    3   *\n    4   * ####Example\n    5   *\n    6:  *     var id = new mongoose.Types.ObjectId;\n    7   *\n    8:  * @constructor ObjectId\n    9   */\n   10  \n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/lib/types/documentarray.js:\n    4  \n    5  var MongooseArray = require('./array'),\n    6:     ObjectId = require('./objectid'),\n    7:     ObjectIdSchema = require('../schema/objectid'),\n    8      utils = require('../utils'),\n    9      Document = require('../document');\n   ..\n  117      }\n  118  \n  119:     // handle cast('string') or cast(ObjectId) etc.\n  120      // only objects are permitted so we can safely assume that\n  121      // non-objects are to be interpreted as _id\n  122      if (Buffer.isBuffer(value) ||\n  123:         value instanceof ObjectId || !utils.isObject(value)) {\n  124        value = {_id: value};\n  125      }\n  ...\n  144     *\n  145     * @return {EmbeddedDocument|null} the subdocument or null if not found.\n  146:    * @param {ObjectId|String|Number|Buffer} id\n  147     * @TODO cast to the _id based on schema for proper comparison\n  148     * @method id\n  ...\n  157  \n  158      try {\n  159:       var casted_ = ObjectIdSchema.prototype.cast.call({}, id);\n  160        if (casted_) {\n  161          casted = String(casted_);\n  ...\n  178            return this[i];\n  179          }\n  180:       } else if (!(id instanceof ObjectId) && !(_id instanceof ObjectId)) {\n  181          if (utils.deepEqual(id, _id)) {\n  182            return this[i];\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/lib/types/index.js:\n   12  exports.DocumentArray = require('./documentarray');\n   13  exports.Decimal128 = require('./decimal128');\n   14: exports.ObjectId = require('./objectid');\n   15  \n   16  exports.Subdocument = require('./subdocument');\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/lib/types/objectid.js:\n    1  /**\n    2:  * ObjectId type constructor\n    3   *\n    4   * ####Example\n    5   *\n    6:  *     var id = new mongoose.Types.ObjectId;\n    7   *\n    8:  * @constructor ObjectId\n    9   */\n   10  \n   11: var ObjectId = require('../drivers').ObjectId;\n   12  \n   13: module.exports = ObjectId;\n   14  \n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/node_modules/bson/HISTORY.md:\n    5  1.0.3 2016-01-03\n    6  ----------------\n    7: - Fixed toString for ObjectId so it will work with inspect.\n    8  \n    9  1.0.2 2016-01-02\n   10  ----------------\n   11: - Minor optimizations for ObjectID to use Buffer.from where available.\n   12  \n   13  1.0.1 2016-12-06\n   ..\n   38  0.5.3 2016-07-11\n   39  -----------------\n   40: - Throw error if ObjectId is not a string or a buffer.\n   41  \n   42  0.5.2 2016-07-11\n   43  -----------------\n   44: - All values encoded big-endian style for ObjectId.\n   45  \n   46  0.5.1 2016-07-11\n   47  -----------------\n   48: - Fixed encoding/decoding issue in ObjectId timestamp generation.\n   49  - Removed BinaryParser dependency from the serializer/deserializer.\n   50  \n   ..\n   55  0.4.23 2016-04-08\n   56  -----------------\n   57: - Allow for proper detection of ObjectId or objects that look like ObjectId, improving compatibility across third party libraries.\n   58  - Remove one package from dependency due to having been pulled from NPM.\n   59  \n   ..\n   78  0.4.18 2015-10-15\n   79  -----------------\n   80: - ObjectID equality check should return boolean instead of throwing exception for invalid oid string #139\n   81  - add option for deserializing binary into Buffer object #116\n   82  \n   ..\n  182  0.2.16 2014-12-17\n  183  -----------------\n  184: - Made pid cycle on 0xffff to avoid weird overflows on creation of ObjectID's\n  185  \n  186  0.2.12 2014-08-24\n  ...\n  191  0.2.3 2013-10-01\n  192  ----------------\n  193: - Drying of ObjectId code for generation of id (Issue #54, https://github.com/moredip)\n  194  - Fixed issue where corrupt CString's could cause endless loop\n  195  - Support for Node 0.11.X > (Issue #49, https://github.com/kkoopa)\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/node_modules/bson/index.js:\n   10    MaxKey = require('./lib/bson/max_key'),\n   11    MinKey = require('./lib/bson/min_key'),\n   12:   ObjectId = require('./lib/bson/objectid'),\n   13    BSONRegExp = require('./lib/bson/regexp'),\n   14    Symbol = require('./lib/bson/symbol'),\n   ..\n   37  BSON.MaxKey = MaxKey;\n   38  BSON.MinKey = MinKey;\n   39: BSON.ObjectId = ObjectId;\n   40: BSON.ObjectID = ObjectId;\n   41  BSON.BSONRegExp = BSONRegExp;\n   42  BSON.Symbol = Symbol;\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/node_modules/bson/browser_build/bson.js:\n 8200  \t    MaxKey = __webpack_require__(316),\n 8201  \t    MinKey = __webpack_require__(315),\n 8202: \t    ObjectId = __webpack_require__(309),\n 8203  \t    BSONRegExp = __webpack_require__(310),\n 8204  \t    Symbol = __webpack_require__(311),\n ....\n 8227  \tBSON.MaxKey = MaxKey;\n 8228  \tBSON.MinKey = MinKey;\n 8229: \tBSON.ObjectId = ObjectId;\n 8230: \tBSON.ObjectID = ObjectId;\n 8231  \tBSON.BSONRegExp = BSONRegExp;\n 8232  \tBSON.Symbol = Symbol;\n ....\n 8248  \t    Double = __webpack_require__(307),\n 8249  \t    Timestamp = __webpack_require__(308),\n 8250: \t    ObjectID = __webpack_require__(309),\n 8251  \t    BSONRegExp = __webpack_require__(310),\n 8252  \t    Symbol = __webpack_require__(311),\n ....\n 8466  \tBSON.BSON_DATA_BINARY = 5;\n 8467  \t/**\n 8468: \t * ObjectID BSON Type\n 8469  \t *\n 8470  \t * @classconstant BSON_DATA_OID\n ....\n 8589  \tmodule.exports.DBRef = DBRef;\n 8590  \tmodule.exports.Binary = Binary;\n 8591: \tmodule.exports.ObjectID = ObjectID;\n 8592  \tmodule.exports.Long = Long;\n 8593  \tmodule.exports.Timestamp = Timestamp;\n ....\n 12641  \n 12642  \t/**\n 12643: \t* Create a new ObjectID instance\n 12644  \t*\n 12645  \t* @class\n 12646  \t* @param {(string|number)} id Can be a 24 byte hex string, 12 byte binary string or a Number.\n 12647: \t* @property {number} generationTime The generation time of this ObjectId instance\n 12648: \t* @return {ObjectID} instance of ObjectID.\n 12649  \t*/\n 12650: \tvar ObjectID = function ObjectID(id) {\n 12651: \t  // Duck-typing to support ObjectId from different npm packages\n 12652: \t  if (id instanceof ObjectID) return id;\n 12653: \t  if (!(this instanceof ObjectID)) return new ObjectID(id);\n 12654  \n 12655: \t  this._bsontype = 'ObjectID';\n 12656  \n 12657  \t  var __id = null;\n 12658: \t  var valid = ObjectID.isValid(id);\n 12659  \n 12660  \t  // Throw an error if it's not a valid setup\n .....\n 12662  \t    throw new Error(\"Argument passed in must be a single String of 12 bytes or a string of 24 hex characters\");\n 12663  \t  } else if (valid && typeof id == 'string' && id.length == 24) {\n 12664: \t    return ObjectID.createFromHexString(id);\n 12665  \t  } else if (id == null || typeof id == 'number') {\n 12666  \t    // convert to 12 byte binary string\n .....\n 12670  \t    this.id = id;\n 12671  \t  } else if (id != null && id.toHexString) {\n 12672: \t    // Duck-typing to support ObjectId from different npm packages\n 12673  \t    return id;\n 12674  \t  } else {\n .....\n 12676  \t  }\n 12677  \n 12678: \t  if (ObjectID.cacheHexString) this.__id = this.toHexString();\n 12679  \t};\n 12680  \n 12681: \t// Allow usage of ObjectId as well as ObjectID\n 12682: \tvar ObjectId = ObjectID;\n 12683  \n 12684  \t// Precomputed hex table enables speedy hex string conversion\n .....\n 12689  \n 12690  \t/**\n 12691: \t* Return the ObjectID id as a 24 byte hex string representation\n 12692  \t*\n 12693  \t* @method\n 12694  \t* @return {string} return the 24 byte hex string representation.\n 12695  \t*/\n 12696: \tObjectID.prototype.toHexString = function () {\n 12697: \t  if (ObjectID.cacheHexString && this.__id) return this.__id;\n 12698  \n 12699  \t  var hexString = '';\n 12700  \t  if (!this.id || !this.id.length) {\n 12701: \t    throw new Error('invalid ObjectId, ObjectId.id must be either a string or a Buffer, but is [' + JSON.stringify(this.id) + ']');\n 12702  \t  }\n 12703  \n 12704  \t  if (this.id instanceof _Buffer) {\n 12705  \t    hexString = convertToHex(this.id);\n 12706: \t    if (ObjectID.cacheHexString) this.__id = hexString;\n 12707  \t    return hexString;\n 12708  \t  }\n .....\n 12712  \t  }\n 12713  \n 12714: \t  if (ObjectID.cacheHexString) this.__id = hexString;\n 12715  \t  return hexString;\n 12716  \t};\n 12717  \n 12718  \t/**\n 12719: \t* Update the ObjectID index used in generating new ObjectID's on the driver\n 12720  \t*\n 12721  \t* @method\n .....\n 12723  \t* @ignore\n 12724  \t*/\n 12725: \tObjectID.prototype.get_inc = function () {\n 12726: \t  return ObjectID.index = (ObjectID.index + 1) % 0xFFFFFF;\n 12727  \t};\n 12728  \n 12729  \t/**\n 12730: \t* Update the ObjectID index used in generating new ObjectID's on the driver\n 12731  \t*\n 12732  \t* @method\n .....\n 12734  \t* @ignore\n 12735  \t*/\n 12736: \tObjectID.prototype.getInc = function () {\n 12737  \t  return this.get_inc();\n 12738  \t};\n 12739  \n 12740  \t/**\n 12741: \t* Generate a 12 byte id buffer used in ObjectID's\n 12742  \t*\n 12743  \t* @method\n .....\n 12745  \t* @return {Buffer} return the 12 byte id buffer string.\n 12746  \t*/\n 12747: \tObjectID.prototype.generate = function (time) {\n 12748  \t  if ('number' != typeof time) {\n 12749  \t    time = ~~(Date.now() / 1000);\n .....\n 12781  \t* @ignore\n 12782  \t*/\n 12783: \tObjectID.prototype.toString = function () {\n 12784  \t  return this.toHexString();\n 12785  \t};\n .....\n 12791  \t* @ignore\n 12792  \t*/\n 12793: \tObjectID.prototype.inspect = ObjectID.prototype.toString;\n 12794  \n 12795  \t/**\n .....\n 12799  \t* @ignore\n 12800  \t*/\n 12801: \tObjectID.prototype.toJSON = function () {\n 12802  \t  return this.toHexString();\n 12803  \t};\n 12804  \n 12805  \t/**\n 12806: \t* Compares the equality of this ObjectID with `otherID`.\n 12807  \t*\n 12808  \t* @method\n 12809: \t* @param {object} otherID ObjectID instance to compare against.\n 12810: \t* @return {boolean} the result of comparing two ObjectID's\n 12811  \t*/\n 12812: \tObjectID.prototype.equals = function equals(otherId) {\n 12813  \t  var id;\n 12814  \n 12815: \t  if (otherId instanceof ObjectID) {\n 12816  \t    return this.toString() == otherId.toString();\n 12817: \t  } else if (typeof otherId == 'string' && ObjectID.isValid(otherId) && otherId.length == 12 && this.id instanceof _Buffer) {\n 12818  \t    return otherId === this.id.toString('binary');\n 12819: \t  } else if (typeof otherId == 'string' && ObjectID.isValid(otherId) && otherId.length == 24) {\n 12820  \t    return otherId.toLowerCase() === this.toHexString();\n 12821: \t  } else if (typeof otherId == 'string' && ObjectID.isValid(otherId) && otherId.length == 12) {\n 12822  \t    return otherId === this.id;\n 12823: \t  } else if (otherId != null && (otherId instanceof ObjectID || otherId.toHexString)) {\n 12824  \t    return otherId.toHexString() === this.toHexString();\n 12825  \t  } else {\n .....\n 12834  \t* @return {date} the generation date\n 12835  \t*/\n 12836: \tObjectID.prototype.getTimestamp = function () {\n 12837  \t  var timestamp = new Date();\n 12838  \t  var time = this.id[3] | this.id[2] << 8 | this.id[1] << 16 | this.id[0] << 24;\n .....\n 12844  \t* @ignore\n 12845  \t*/\n 12846: \tObjectID.index = ~~(Math.random() * 0xFFFFFF);\n 12847  \n 12848  \t/**\n 12849  \t* @ignore\n 12850  \t*/\n 12851: \tObjectID.createPk = function createPk() {\n 12852: \t  return new ObjectID();\n 12853  \t};\n 12854  \n 12855  \t/**\n 12856: \t* Creates an ObjectID from a second based number, with the rest of the ObjectID zeroed out. Used for comparisons or sorting the ObjectID.\n 12857  \t*\n 12858  \t* @method\n 12859  \t* @param {number} time an integer number representing a number of seconds.\n 12860: \t* @return {ObjectID} return the created ObjectID\n 12861  \t*/\n 12862: \tObjectID.createFromTime = function createFromTime(time) {\n 12863  \t  var buffer = new Buffer([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n 12864  \t  // Encode time into first 4 bytes\n .....\n 12867  \t  buffer[1] = time >> 16 & 0xff;\n 12868  \t  buffer[0] = time >> 24 & 0xff;\n 12869: \t  // Return the new objectId\n 12870: \t  return new ObjectID(buffer);\n 12871  \t};\n 12872  \n .....\n 12884  \n 12885  \t/**\n 12886: \t* Creates an ObjectID from a hex string representation of an ObjectID.\n 12887  \t*\n 12888  \t* @method\n 12889: \t* @param {string} hexString create a ObjectID from a passed in 24 byte hexstring.\n 12890: \t* @return {ObjectID} return the created ObjectID\n 12891  \t*/\n 12892: \tObjectID.createFromHexString = function createFromHexString(string) {\n 12893  \t  // Throw an error if it's not a valid setup\n 12894  \t  if (typeof string === 'undefined' || string != null && string.length != 24) throw new Error(\"Argument passed in must be a single String of 12 bytes or a string of 24 hex characters\");\n .....\n 12910  \t  }\n 12911  \n 12912: \t  return new ObjectID(array);\n 12913  \t};\n 12914  \n 12915  \t/**\n 12916: \t* Checks if a value is a valid bson ObjectId\n 12917  \t*\n 12918  \t* @method\n 12919: \t* @return {boolean} return true if the value is a valid bson ObjectId, return false otherwise.\n 12920  \t*/\n 12921: \tObjectID.isValid = function isValid(id) {\n 12922  \t  if (id == null) return false;\n 12923  \n .....\n 12930  \t  }\n 12931  \n 12932: \t  if (id instanceof ObjectID) {\n 12933  \t    return true;\n 12934  \t  }\n .....\n 12938  \t  }\n 12939  \n 12940: \t  // Duck-Typing detection of ObjectId like objects\n 12941  \t  if (id.toHexString) {\n 12942  \t    return id.id.length == 12 || id.id.length == 24 && checkForHexRegExp.test(id.id);\n .....\n 12949  \t* @ignore\n 12950  \t*/\n 12951: \tObject.defineProperty(ObjectID.prototype, \"generationTime\", {\n 12952  \t  enumerable: true,\n 12953  \t  get: function () {\n .....\n 12966  \t * Expose.\n 12967  \t */\n 12968: \tmodule.exports = ObjectID;\n 12969: \tmodule.exports.ObjectID = ObjectID;\n 12970: \tmodule.exports.ObjectId = ObjectID;\n 12971  \t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(294), __webpack_require__(300).Buffer))\n 12972  \n .....\n 13884  \t * @class\n 13885  \t * @param {string} namespace the collection name.\n 13886: \t * @param {ObjectID} oid the reference ObjectID.\n 13887  \t * @param {string} [db] optional db name, if omitted the reference is local to the current db.\n 13888  \t * @return {DBRef}\n .....\n 14272  \t    Double = __webpack_require__(307).Double,\n 14273  \t    Timestamp = __webpack_require__(308).Timestamp,\n 14274: \t    ObjectID = __webpack_require__(309).ObjectID,\n 14275  \t    Symbol = __webpack_require__(311).Symbol,\n 14276  \t    Code = __webpack_require__(313).Code,\n .....\n 14367  \t      var oid = new Buffer(12);\n 14368  \t      buffer.copy(oid, 0, index, index + 12);\n 14369: \t      object[name] = new ObjectID(oid);\n 14370  \t      index = index + 12;\n 14371  \t    } else if (elementType == BSON.BSON_DATA_INT && promoteValues == false) {\n .....\n 14668  \t      var oidBuffer = new Buffer(12);\n 14669  \t      buffer.copy(oidBuffer, 0, index, index + 12);\n 14670: \t      var oid = new ObjectID(oidBuffer);\n 14671  \n 14672  \t      // Update the index\n .....\n 14775  \tBSON.BSON_DATA_UNDEFINED = 6;\n 14776  \t/**\n 14777: \t * ObjectID BSON Type\n 14778  \t *\n 14779  \t * @classconstant BSON_DATA_OID\n .....\n 15565  \t    Double = __webpack_require__(307).Double,\n 15566  \t    Timestamp = __webpack_require__(308).Timestamp,\n 15567: \t    ObjectID = __webpack_require__(309).ObjectID,\n 15568  \t    Symbol = __webpack_require__(311).Symbol,\n 15569  \t    Code = __webpack_require__(313).Code,\n .....\n 15814  \t};\n 15815  \n 15816: \tvar serializeObjectId = function (buffer, key, value, index, isArray) {\n 15817  \t  // Write the type\n 15818  \t  buffer[index++] = BSON.BSON_DATA_OID;\n .....\n 15824  \t  buffer[index++] = 0;\n 15825  \n 15826: \t  // Write the objectId into the shared buffer\n 15827  \t  if (typeof value.id == 'string') {\n 15828  \t    buffer.write(value.id, index, 'binary');\n .....\n 15830  \t    value.id.copy(buffer, index, 0, 12);\n 15831  \t  } else {\n 15832: \t    throw new Error('object [' + JSON.stringify(value) + \"] is not a valid ObjectId\");\n 15833  \t  }\n 15834  \n .....\n 16178  \t      } else if (value === null) {\n 16179  \t        index = serializeNull(buffer, key, value, index, true);\n 16180: \t      } else if (value['_bsontype'] == 'ObjectID') {\n 16181: \t        index = serializeObjectId(buffer, key, value, index, true);\n 16182  \t      } else if (Buffer.isBuffer(value)) {\n 16183  \t        index = serializeBuffer(buffer, key, value, index, true);\n .....\n 16257  \t      } else if (value === null) {\n 16258  \t        index = serializeNull(buffer, key, value, index);\n 16259: \t      } else if (value['_bsontype'] == 'ObjectID') {\n 16260: \t        index = serializeObjectId(buffer, key, value, index);\n 16261  \t      } else if (Buffer.isBuffer(value)) {\n 16262  \t        index = serializeBuffer(buffer, key, value, index);\n .....\n 16338  \t      } else if (value === null) {\n 16339  \t        index = serializeNull(buffer, key, value, index);\n 16340: \t      } else if (value['_bsontype'] == 'ObjectID') {\n 16341: \t        index = serializeObjectId(buffer, key, value, index);\n 16342  \t      } else if (Buffer.isBuffer(value)) {\n 16343  \t        index = serializeBuffer(buffer, key, value, index);\n .....\n 16429  \tBSON.BSON_DATA_BINARY = 5;\n 16430  \t/**\n 16431: \t * ObjectID BSON Type, deprecated\n 16432  \t *\n 16433  \t * @classconstant BSON_DATA_UNDEFINED\n .....\n 16435  \tBSON.BSON_DATA_UNDEFINED = 6;\n 16436  \t/**\n 16437: \t * ObjectID BSON Type\n 16438  \t *\n 16439  \t * @classconstant BSON_DATA_OID\n .....\n 16584  \t    Double = __webpack_require__(307).Double,\n 16585  \t    Timestamp = __webpack_require__(308).Timestamp,\n 16586: \t    ObjectID = __webpack_require__(309).ObjectID,\n 16587  \t    Symbol = __webpack_require__(311).Symbol,\n 16588  \t    BSONRegExp = __webpack_require__(310).BSONRegExp,\n .....\n 16654  \t      if (value == null || value instanceof MinKey || value instanceof MaxKey || value['_bsontype'] == 'MinKey' || value['_bsontype'] == 'MaxKey') {\n 16655  \t        return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + 1;\n 16656: \t      } else if (value instanceof ObjectID || value['_bsontype'] == 'ObjectID') {\n 16657  \t        return (name != null ? Buffer.byteLength(name, 'utf8') + 1 : 0) + (12 + 1);\n 16658  \t      } else if (value instanceof Date || isDate(value)) {\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/node_modules/bson/lib/bson/bson.js:\n    7    Double = require('./double'),\n    8    Timestamp = require('./timestamp'),\n    9:   ObjectID = require('./objectid'),\n   10    BSONRegExp = require('./regexp'),\n   11    Symbol = require('./symbol'),\n   ..\n  225  BSON.BSON_DATA_BINARY = 5;\n  226  /**\n  227:  * ObjectID BSON Type\n  228   *\n  229   * @classconstant BSON_DATA_OID\n  ...\n  348  module.exports.DBRef = DBRef;\n  349  module.exports.Binary = Binary;\n  350: module.exports.ObjectID = ObjectID;\n  351  module.exports.Long = Long;\n  352  module.exports.Timestamp = Timestamp;\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/node_modules/bson/lib/bson/db_ref.js:\n    4   * @class\n    5   * @param {string} namespace the collection name.\n    6:  * @param {ObjectID} oid the reference ObjectID.\n    7   * @param {string} [db] optional db name, if omitted the reference is local to the current db.\n    8   * @return {DBRef}\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/node_modules/bson/lib/bson/objectid.js:\n   19  \n   20  /**\n   21: * Create a new ObjectID instance\n   22  *\n   23  * @class\n   24  * @param {(string|number)} id Can be a 24 byte hex string, 12 byte binary string or a Number.\n   25: * @property {number} generationTime The generation time of this ObjectId instance\n   26: * @return {ObjectID} instance of ObjectID.\n   27  */\n   28: var ObjectID = function ObjectID(id) {\n   29:   // Duck-typing to support ObjectId from different npm packages\n   30:   if(id instanceof ObjectID) return id;\n   31:   if(!(this instanceof ObjectID)) return new ObjectID(id);\n   32  \n   33:   this._bsontype = 'ObjectID';\n   34  \n   35:   // The most common usecase (blank id, new objectId instance)\n   36    if(id == null || typeof id == 'number') {\n   37      // Generate a new id\n   38      this.id = this.generate(id);\n   39      // If we are caching the hex string\n   40:     if(ObjectID.cacheHexString) this.__id = this.toString('hex');\n   41      // Return the object\n   42      return;\n   ..\n   44  \n   45    // Check if the passed in id is valid\n   46:   var valid = ObjectID.isValid(id);\n   47  \n   48    // Throw an error if it's not a valid setup\n   ..\n   50      throw new Error(\"Argument passed in must be a single String of 12 bytes or a string of 24 hex characters\");\n   51    } else if(valid && typeof id == 'string' && id.length == 24 && hasBufferType) {\n   52:     return new ObjectID(new Buffer(id, 'hex'));\n   53    } else if(valid && typeof id == 'string' && id.length == 24) {\n   54:     return ObjectID.createFromHexString(id);\n   55    } else if(id != null && id.length === 12) {\n   56      // assume 12 byte string\n   57      this.id = id;\n   58    } else if(id != null && id.toHexString) {\n   59:     // Duck-typing to support ObjectId from different npm packages\n   60      return id;\n   61    } else {\n   ..\n   63    }\n   64  \n   65:   if(ObjectID.cacheHexString) this.__id = this.toString('hex');\n   66  };\n   67  \n   68: // Allow usage of ObjectId as well as ObjectID\n   69: var ObjectId = ObjectID;\n   70  \n   71  // Precomputed hex table enables speedy hex string conversion\n   ..\n   76  \n   77  /**\n   78: * Return the ObjectID id as a 24 byte hex string representation\n   79  *\n   80  * @method\n   81  * @return {string} return the 24 byte hex string representation.\n   82  */\n   83: ObjectID.prototype.toHexString = function() {\n   84:   if(ObjectID.cacheHexString && this.__id) return this.__id;\n   85  \n   86    var hexString = '';\n   87    if(!this.id || !this.id.length) {\n   88:     throw new Error('invalid ObjectId, ObjectId.id must be either a string or a Buffer, but is [' + JSON.stringify(this.id) + ']');\n   89    }\n   90  \n   91    if(this.id instanceof _Buffer) {\n   92      hexString = convertToHex(this.id);\n   93:     if(ObjectID.cacheHexString) this.__id = hexString;\n   94      return hexString;\n   95    }\n   ..\n   99    }\n  100  \n  101:   if(ObjectID.cacheHexString) this.__id = hexString;\n  102    return hexString;\n  103  };\n  104  \n  105  /**\n  106: * Update the ObjectID index used in generating new ObjectID's on the driver\n  107  *\n  108  * @method\n  ...\n  110  * @ignore\n  111  */\n  112: ObjectID.prototype.get_inc = function() {\n  113:   return ObjectID.index = (ObjectID.index + 1) % 0xFFFFFF;\n  114  };\n  115  \n  116  /**\n  117: * Update the ObjectID index used in generating new ObjectID's on the driver\n  118  *\n  119  * @method\n  ...\n  121  * @ignore\n  122  */\n  123: ObjectID.prototype.getInc = function() {\n  124    return this.get_inc();\n  125  };\n  126  \n  127  /**\n  128: * Generate a 12 byte id buffer used in ObjectID's\n  129  *\n  130  * @method\n  ...\n  132  * @return {Buffer} return the 12 byte id buffer string.\n  133  */\n  134: ObjectID.prototype.generate = function(time) {\n  135    if ('number' != typeof time) {\n  136      time = ~~(Date.now()/1000);\n  ...\n  169  * @ignore\n  170  */\n  171: ObjectID.prototype.toString = function(format) {\n  172    // Is the id a buffer then use the buffer toString method to return the format\n  173    if(this.id && this.id.copy) {\n  ...\n  185  * @ignore\n  186  */\n  187: ObjectID.prototype.inspect = ObjectID.prototype.toString;\n  188  \n  189  /**\n  ...\n  193  * @ignore\n  194  */\n  195: ObjectID.prototype.toJSON = function() {\n  196    return this.toHexString();\n  197  };\n  198  \n  199  /**\n  200: * Compares the equality of this ObjectID with `otherID`.\n  201  *\n  202  * @method\n  203: * @param {object} otherID ObjectID instance to compare against.\n  204: * @return {boolean} the result of comparing two ObjectID's\n  205  */\n  206: ObjectID.prototype.equals = function equals (otherId) {\n  207    var id;\n  208  \n  209:   if(otherId instanceof ObjectID) {\n  210      return this.toString() == otherId.toString();\n  211:   } else if(typeof otherId == 'string' && ObjectID.isValid(otherId) && otherId.length == 12 && this.id instanceof _Buffer) {\n  212      return otherId === this.id.toString('binary');\n  213:   } else if(typeof otherId == 'string' && ObjectID.isValid(otherId) && otherId.length == 24) {\n  214      return otherId.toLowerCase() === this.toHexString();\n  215:   } else if(typeof otherId == 'string' && ObjectID.isValid(otherId) && otherId.length == 12) {\n  216      return otherId === this.id;\n  217:   } else if(otherId != null && (otherId instanceof ObjectID || otherId.toHexString)) {\n  218      return otherId.toHexString() === this.toHexString();\n  219    } else {\n  ...\n  228  * @return {date} the generation date\n  229  */\n  230: ObjectID.prototype.getTimestamp = function() {\n  231    var timestamp = new Date();\n  232    var time = this.id[3] | this.id[2] << 8 | this.id[1] << 16 | this.id[0] << 24;\n  ...\n  238  * @ignore\n  239  */\n  240: ObjectID.index = ~~(Math.random() * 0xFFFFFF);\n  241  \n  242  /**\n  243  * @ignore\n  244  */\n  245: ObjectID.createPk = function createPk () {\n  246:   return new ObjectID();\n  247  };\n  248  \n  249  /**\n  250: * Creates an ObjectID from a second based number, with the rest of the ObjectID zeroed out. Used for comparisons or sorting the ObjectID.\n  251  *\n  252  * @method\n  253  * @param {number} time an integer number representing a number of seconds.\n  254: * @return {ObjectID} return the created ObjectID\n  255  */\n  256: ObjectID.createFromTime = function createFromTime (time) {\n  257    var buffer = new Buffer([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n  258    // Encode time into first 4 bytes\n  ...\n  261    buffer[1] = (time >> 16) & 0xff;\n  262    buffer[0] = (time >> 24) & 0xff;\n  263:   // Return the new objectId\n  264:   return new ObjectID(buffer);\n  265  };\n  266  \n  ...\n  278  \n  279  /**\n  280: * Creates an ObjectID from a hex string representation of an ObjectID.\n  281  *\n  282  * @method\n  283: * @param {string} hexString create a ObjectID from a passed in 24 byte hexstring.\n  284: * @return {ObjectID} return the created ObjectID\n  285  */\n  286: ObjectID.createFromHexString = function createFromHexString (string) {\n  287    // Throw an error if it's not a valid setup\n  288    if(typeof string === 'undefined' || string != null && string.length != 24) {\n  ...\n  291  \n  292    // Use Buffer.from method if available\n  293:   if(hasBufferType) return new ObjectID(new Buffer(string, 'hex'));\n  294  \n  295    // Calculate lengths\n  ...\n  302    }\n  303  \n  304:   return new ObjectID(array);\n  305  };\n  306  \n  307  /**\n  308: * Checks if a value is a valid bson ObjectId\n  309  *\n  310  * @method\n  311: * @return {boolean} return true if the value is a valid bson ObjectId, return false otherwise.\n  312  */\n  313: ObjectID.isValid = function isValid(id) {\n  314    if(id == null) return false;\n  315  \n  ...\n  322    }\n  323  \n  324:   if(id instanceof ObjectID) {\n  325      return true;\n  326    }\n  ...\n  330    }\n  331  \n  332:   // Duck-Typing detection of ObjectId like objects\n  333    if(id.toHexString) {\n  334      return id.id.length == 12 || (id.id.length == 24 && checkForHexRegExp.test(id.id));\n  ...\n  341  * @ignore\n  342  */\n  343: Object.defineProperty(ObjectID.prototype, \"generationTime\", {\n  344     enumerable: true\n  345   , get: function () {\n  ...\n  358   * Expose.\n  359   */\n  360: module.exports = ObjectID;\n  361: module.exports.ObjectID = ObjectID;\n  362: module.exports.ObjectId = ObjectID;\n  363  \n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/node_modules/bson/lib/bson/parser/calculate_size.js:\n    6    , Double = require('../double').Double\n    7    , Timestamp = require('../timestamp').Timestamp\n    8:   , ObjectID = require('../objectid').ObjectID\n    9    , Symbol = require('../symbol').Symbol\n   10    , BSONRegExp = require('../regexp').BSONRegExp\n   ..\n   74        if(value == null || value instanceof MinKey || value instanceof MaxKey || value['_bsontype'] == 'MinKey' || value['_bsontype'] == 'MaxKey') {\n   75          return (name != null ? (Buffer.byteLength(name, 'utf8') + 1) : 0) + (1);\n   76:       } else if(value instanceof ObjectID || value['_bsontype'] == 'ObjectID') {\n   77          return (name != null ? (Buffer.byteLength(name, 'utf8') + 1) : 0) + (12 + 1);\n   78        } else if(value instanceof Date || isDate(value)) {\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/node_modules/bson/lib/bson/parser/deserializer.js:\n    6    Double = require('../double').Double,\n    7    Timestamp = require('../timestamp').Timestamp,\n    8:   ObjectID = require('../objectid').ObjectID,\n    9    Symbol = require('../symbol').Symbol,\n   10    Code = require('../code').Code,\n   ..\n  101  \t\t\tvar oid = new Buffer(12);\n  102  \t\t\tbuffer.copy(oid, 0, index, index + 12);\n  103:       object[name] = new ObjectID(oid);\n  104        index = index + 12;\n  105  \t\t} else if(elementType == BSON.BSON_DATA_INT && promoteValues == false) {\n  ...\n  402  \t\t\tvar oidBuffer = new Buffer(12);\n  403  \t\t\tbuffer.copy(oidBuffer, 0, index, index + 12);\n  404:       var oid = new ObjectID(oidBuffer);\n  405  \n  406  \t\t\t// Update the index\n  ...\n  509  BSON.BSON_DATA_UNDEFINED = 6;\n  510  /**\n  511:  * ObjectID BSON Type\n  512   *\n  513   * @classconstant BSON_DATA_OID\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/node_modules/bson/lib/bson/parser/serializer.js:\n    7    Double = require('../double').Double,\n    8    Timestamp = require('../timestamp').Timestamp,\n    9:   ObjectID = require('../objectid').ObjectID,\n   10    Symbol = require('../symbol').Symbol,\n   11    Code = require('../code').Code,\n   ..\n  245  }\n  246  \n  247: var serializeObjectId = function(buffer, key, value, index, isArray) {\n  248    // Write the type\n  249    buffer[index++] = BSON.BSON_DATA_OID;\n  ...\n  255    buffer[index++] = 0;\n  256  \n  257:   // Write the objectId into the shared buffer\n  258    if(typeof value.id == 'string') {\n  259      buffer.write(value.id, index, 'binary')\n  ...\n  261      value.id.copy(buffer, index, 0, 12);\n  262    } else {\n  263:     throw new Error('object [' + JSON.stringify(value) + \"] is not a valid ObjectId\");\n  264    }\n  265  \n  ...\n  609        } else if(value === null) {\n  610          index = serializeNull(buffer, key, value, index, true);\n  611:       } else if(value['_bsontype'] == 'ObjectID') {\n  612:         index = serializeObjectId(buffer, key, value, index, true);\n  613        } else if(Buffer.isBuffer(value)) {\n  614          index = serializeBuffer(buffer, key, value, index, true);\n  ...\n  687        } else if(value === null || value === undefined) {\n  688          index = serializeNull(buffer, key, value, index);\n  689:       } else if(value['_bsontype'] == 'ObjectID') {\n  690:         index = serializeObjectId(buffer, key, value, index);\n  691        } else if(Buffer.isBuffer(value)) {\n  692          index = serializeBuffer(buffer, key, value, index);\n  ...\n  767        } else if(value === null || value === undefined) {\n  768          index = serializeNull(buffer, key, value, index);\n  769:       } else if(value['_bsontype'] == 'ObjectID') {\n  770:         index = serializeObjectId(buffer, key, value, index);\n  771        } else if(Buffer.isBuffer(value)) {\n  772          index = serializeBuffer(buffer, key, value, index);\n  ...\n  858  BSON.BSON_DATA_BINARY = 5;\n  859  /**\n  860:  * ObjectID BSON Type, deprecated\n  861   *\n  862   * @classconstant BSON_DATA_UNDEFINED\n  ...\n  864  BSON.BSON_DATA_UNDEFINED = 6;\n  865  /**\n  866:  * ObjectID BSON Type\n  867   *\n  868   * @classconstant BSON_DATA_OID\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/node_modules/mongodb/conf.json:\n   33        \"node_modules/bson/lib/bson/double.js\",\n   34        \"node_modules/bson/lib/bson/long.js\",\n   35:       \"node_modules/bson/lib/bson/objectid.js\",\n   36        \"node_modules/bson/lib/bson/symbol.js\",\n   37        \"node_modules/bson/lib/bson/timestamp.js\",\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/node_modules/mongodb/HISTORY.md:\n   78  2.2.18 2017-01-03\n   79  -----------------\n   80: * Updated mongodb-core to 2.1.4 to fix bson ObjectId toString issue with utils.inspect messing with toString parameters in node 6.\n   81  \n   82  2.2.17 2017-01-02\n   ..\n  169  * Avoid timeout in attemptReconnect causing multiple attemptReconnect attempts to happen (Issue #134, https://github.com/dead-horse).\n  170  * Ensure promoteBuffers is propegated in same fashion as promoteValues and promoteLongs.\n  171: * Don't treat ObjectId as object for mapReduce scope (Issue #1397, https://github.com/vkarpov15).\n  172  \n  173  2.2.8 2016-08-23\n  ...\n  486  * NODE-541 Initial Support \"read committed\" isolation level where \"committed\" means confimed by the voting majority of a replica set.\n  487  * GridStore doesn't share readPreference setting from connection string. (Issue #1295, https://github.com/zhangyaoxing)\n  488: * fixed forceServerObjectId calls (Issue #1292, https://github.com/d-mon-)\n  489  * Pass promise library through to DB function (Issue #1294, https://github.com/RovingCodeMonkey)\n  490  \n  ...\n  815  1.4.4 2014-05-13\n  816  ----------------\n  817: * Bumped BSON version to use the NaN 1.0 package, fixed strict comparison issue for ObjectID\n  818  * Removed leaking global variable (Issue #1174, https://github.com/dainis)\n  819  * MongoClient respects connectTimeoutMS for initial discovery process (NODE-185)\n  ...\n 1062  * Accept function in a Map Reduce scope object not only a function string (Issue #826, https://github.com/aheckmann)\n 1063  * Typo in db.authenticate caused a check (for provided connection) to return false, causing a connection AND onAll=true to be passed into __executeQueryCommand downstream (Issue #831, https://github.com/m4tty)\n 1064: * Allow gridfs objects to use non ObjectID ids (Issue #825, https://github.com/nailgun)\n 1065  * Removed the double wrap, by not passing an Error object to the wrap function (Issue #832, https://github.com/m4tty)\n 1066  * Fix connection leak (gh-827) for HA replicaset health checks (Issue #833, https://github.com/aheckmann)\n ....\n 1178  * Added disableDriverBSONSizeCheck property to Server.js for people who wish to push the inserts to the limit (Issue #609).\n 1179  * Fixed bug where collection.group keyf given as Code is processed as a regular object (Issue #608, https://github.com/rrusso2007).\n 1180: * Case mismatch between driver's ObjectID and mongo's ObjectId, allow both (Issue #618).\n 1181  * Cleanup map reduce (Issue #614, https://github.com/aheckmann).\n 1182  * Add proper error handling to gridfs (Issue #615, https://github.com/aheckmann).\n ....\n 1217  ----------------\n 1218  * Passing back getLastError object as 3rd parameter on findAndModify command.\n 1219: * Fixed a bunch of performance regressions in objectId and cursor.\n 1220  * Fixed issue #600 allowing for single document delete to be passed in remove command.\n 1221  \n ....\n 1228  0.9.9.8 2012-04-12\n 1229  ------------------\n 1230: * _id=0 is being turned into an ObjectID (Issue #551)\n 1231  * fix for error in GridStore write method (Issue #559)\n 1232  * Fix for reading a GridStore from arbitrary, non-chunk aligned offsets, added test (Issue #563, https://github.com/subroutine)\n ....\n 1286  0.9.9 2012-02-13\n 1287  ----------------\n 1288: * Added createFromTime method on ObjectID to allow for queries against _id more easily using the timestamp.\n 1289  * Db.close(true) now makes connection unusable as it's been force closed by app.\n 1290  * Fixed mapReduce and group functions to correctly send slaveOk on queries.\n ....\n 1330  ------------------\n 1331  * Workaround for issue with Object.defineProperty (Issue #484)\n 1332: * ObjectID generation with date does not set rest of fields to zero (Issue #482)\n 1333  \n 1334  0.9.8-2 2012-01-20\n ....\n 1405  0.9.7.2-1 2011-12-16\n 1406  --------------------\n 1407: * ~10% perf improvement for ObjectId#toHexString (Issue #448, https://github.com/aheckmann)\n 1408  * Only using process.nextTick on errors emitted on callbacks not on all parsing, reduces number of ticks in the driver\n 1409  * Changed parsing off bson messages to use process.nextTick to do bson parsing in batches if the message is over 10K as to yield more time to the event look increasing concurrency on big mongoreply messages with multiple documents\n ....\n 1414      * pass in the ssl:true option to the server or replicaset server config to enable\n 1415      * a bug either in mongodb or node.js does not allow for more than 1 connection pr db instance (poolSize:1).\n 1416: * Added getTimestamp() method to objectID that returns a date object\n 1417  * Added finalize function to collection.group\n 1418      * function group (keys, condition, initial, reduce, finalize, command, callback)\n ....\n 1613  * FindAndModify not returning error message as other methods Issue #277\n 1614  * Added test coverage for $push, $pushAll and $inc atomic operations\n 1615: * Correct Error handling for non 12/24 bit ids on Pure JS ObjectID class Issue #276\n 1616  * Fixed terrible deserialization bug in js bson code #285\n 1617  * Fix by andrewjstone to avoid throwing errors when this.primary not defined\n ....\n 1621  * Rewritten BSON js parser now faster than the C parser on my core2duo laptop\n 1622  * Added option full to indexInformation to get all index info Issue #265\n 1623: * Passing in ObjectID for new Gridstore works correctly Issue #272\n 1624  \n 1625  0.9.6-4 2011-07-01\n ....\n 1632  * Fixed writeBuffer/readBuffer methods on GridStore so they work correctly\n 1633  * Automatic handling of buffers when using write method on GridStore\n 1634: * GridStore now accepts a ObjectID instead of file name for write and read methods\n 1635  * GridStore.list accepts id option to return of file ids instead of filenames\n 1636  * GridStore close method returns document for the file allowing user to reference _id field\n ....\n 1669  * Added connection pool functionality\n 1670  * Fixed serious bug in C++ bson parser where bytes > 127 would generate 2 byte sequences\n 1671: * Allows for forcing the server to assign ObjectID's using the option {forceServerObjectId: true}\n 1672  \n 1673  0.6.8\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/node_modules/mongodb/index.js:\n   37  connect.MinKey = core.BSON.MinKey;\n   38  connect.MaxKey = core.BSON.MaxKey;\n   39: connect.ObjectID = core.BSON.ObjectID;\n   40: connect.ObjectId = core.BSON.ObjectID;\n   41  connect.Symbol = core.BSON.Symbol;\n   42  connect.Timestamp = core.BSON.Timestamp;\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/node_modules/mongodb/lib/collection.js:\n    2  \n    3  var checkCollectionName = require('./utils').checkCollectionName\n    4:   , ObjectID = require('mongodb-core').BSON.ObjectID\n    5    , Long = require('mongodb-core').BSON.Long\n    6    , Code = require('mongodb-core').BSON.Code\n    .\n   93    // Set custom primary key factory if provided\n   94    pkFactory = pkFactory == null\n   95:     ? ObjectID\n   96      : pkFactory;\n   97  \n   ..\n  250    }\n  251  \n  252:   // Check special case where we are using an objectId\n  253:   if(selector != null && selector._bsontype == 'ObjectID') {\n  254      selector = {_id:selector};\n  255    }\n  ...\n  392   * Inserts a single document into MongoDB. If documents passed in do not contain the **_id** field,\n  393   * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n  394:  * can be overridden by setting the **forceServerObjectId** flag.\n  395   *\n  396   * @method\n  ...\n  401   * @param {boolean} [options.j=false] Specify a journal write concern.\n  402   * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.\n  403:  * @param {boolean} [options.forceServerObjectId=false] Force server to assign _id values instead of driver.\n  404   * @param {boolean} [options.bypassDocumentValidation=false] Allow driver to bypass schema validation in MongoDB 3.2 or higher.\n  405   * @param {Collection~insertOneWriteOpCallback} [callback] The command result callback\n  ...\n  479   * Inserts an array of documents into MongoDB. If documents passed in do not contain the **_id** field,\n  480   * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n  481:  * can be overridden by setting the **forceServerObjectId** flag.\n  482   *\n  483   * @method\n  ...\n  488   * @param {boolean} [options.j=false] Specify a journal write concern.\n  489   * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.\n  490:  * @param {boolean} [options.forceServerObjectId=false] Force server to assign _id values instead of driver.\n  491   * @param {boolean} [options.bypassDocumentValidation=false] Allow driver to bypass schema validation in MongoDB 3.2 or higher.\n  492   * @param {boolean} [options.ordered=true] If true, when an insert fails, don't execute the remaining writes. If false, continue with remaining inserts when one fails.\n  ...\n  515  \n  516    // Set up the force server object id\n  517:   var forceServerObjectId = typeof options.forceServerObjectId == 'boolean'\n  518:     ? options.forceServerObjectId : self.s.db.options.forceServerObjectId;\n  519  \n  520    // Do we want to force the server to assign the _id key\n  521:   if(forceServerObjectId !== true) {\n  522      // Add _id if not specified\n  523      for(var i = 0; i < docs.length; i++) {\n  ...\n  586   * If documents passed in do not contain the **_id** field,\n  587   * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n  588:  * can be overridden by setting the **forceServerObjectId** flag.\n  589   *\n  590   * @method\n  ...\n  731  \n  732    // Set up the force server object id\n  733:   var forceServerObjectId = typeof options.forceServerObjectId == 'boolean'\n  734:     ? options.forceServerObjectId : self.s.db.options.forceServerObjectId;\n  735  \n  736    // Add _id if not specified\n  737:   if(forceServerObjectId !== true){\n  738      for(var i = 0; i < docs.length; i++) {\n  739        if(docs[i]._id == null) docs[i]._id = self.s.pkFactory.createPk();\n  ...\n  759  /**\n  760   * @typedef {Object} Collection~WriteOpResult\n  761:  * @property {object[]} ops All the documents inserted using insertOne/insertMany/replaceOne. Documents contain the _id field if forceServerObjectId == false for insertOne/insertMany\n  762   * @property {object} connection The connection object used for the operation.\n  763   * @property {object} result The command result object.\n  ...\n  774   * @typedef {Object} Collection~insertWriteOpResult\n  775   * @property {Number} insertedCount The total amount of documents inserted.\n  776:  * @property {object[]} ops All the documents inserted using insertOne/insertMany/replaceOne. Documents contain the _id field if forceServerObjectId == false for insertOne/insertMany\n  777:  * @property {ObjectId[]} insertedIds All the generated _id's for the inserted documents.\n  778   * @property {object} connection The connection object used for the operation.\n  779   * @property {object} result The raw command result object returned from MongoDB (content might vary by server version).\n  ...\n  785   * @typedef {Object} Collection~insertOneWriteOpResult\n  786   * @property {Number} insertedCount The total amount of documents inserted.\n  787:  * @property {object[]} ops All the documents inserted using insertOne/insertMany/replaceOne. Documents contain the _id field if forceServerObjectId == false for insertOne/insertMany\n  788:  * @property {ObjectId} insertedId The driver generated ObjectId for the insert operation.\n  789   * @property {object} connection The connection object used for the operation.\n  790   * @property {object} result The raw command result object returned from MongoDB (content might vary by server version).\n  ...\n  810   * Inserts a single document or a an array of documents into MongoDB. If documents passed in do not contain the **_id** field,\n  811   * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n  812:  * can be overridden by setting the **forceServerObjectId** flag.\n  813   *\n  814   * @method\n  ...\n  819   * @param {boolean} [options.j=false] Specify a journal write concern.\n  820   * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.\n  821:  * @param {boolean} [options.forceServerObjectId=false] Force server to assign _id values instead of driver.\n  822   * @param {boolean} [options.bypassDocumentValidation=false] Allow driver to bypass schema validation in MongoDB 3.2 or higher.\n  823   * @param {Collection~insertWriteOpCallback} [callback] The command result callback\n  ...\n  850   * @property {Number} upsertedCount The number of documents upserted.\n  851   * @property {Object} upsertedId The upserted id.\n  852:  * @property {ObjectId} upsertedId._id The upserted _id returned from the server.\n  853   */\n  854  \n  ...\n 3112   */\n 3113  function processScope (scope) {\n 3114:   if(!isObject(scope) || scope._bsontype == 'ObjectID') {\n 3115      return scope;\n 3116    }\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/node_modules/mongodb/lib/db.js:\n   17    , CoreReadPreference = require('mongodb-core').ReadPreference\n   18    , MongoError = require('mongodb-core').MongoError\n   19:   , ObjectID = require('mongodb-core').ObjectID\n   20    , Define = require('./metadata')\n   21    , Logger = require('mongodb-core').Logger\n   ..\n   25    , assign = require('./utils').assign;\n   26  \n   27: var debugFields = ['authSource', 'w', 'wtimeout', 'j', 'native_parser', 'forceServerObjectId'\n   28    , 'serializeFunctions', 'raw', 'promoteLongs', 'promoteValues', 'promoteBuffers', 'bufferMaxEntries', 'numberOfRetries', 'retryMiliSeconds'\n   29    , 'readPreference', 'pkFactory', 'parentDb', 'promiseLibrary', 'noListener'];\n   ..\n   51  // Allowed parameters\n   52  var legalOptionNames = ['w', 'wtimeout', 'fsync', 'j', 'readPreference', 'readPreferenceTags', 'native_parser'\n   53:   , 'forceServerObjectId', 'pkFactory', 'serializeFunctions', 'raw', 'bufferMaxEntries', 'authSource'\n   54    , 'ignoreUndefined', 'promoteLongs', 'promiseLibrary', 'readConcern', 'retryMiliSeconds', 'numberOfRetries'\n   55    , 'parentDb', 'noListener', 'loggerLevel', 'logger', 'promoteBuffers', 'promoteLongs', 'promoteValues'];\n   ..\n   65   * @param {number} [options.wtimeout=null] The write concern timeout.\n   66   * @param {boolean} [options.j=false] Specify a journal write concern.\n   67:  * @param {boolean} [options.forceServerObjectId=false] Force server to assign _id values instead of driver.\n   68   * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.\n   69   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n   ..\n  140      // Parent db (if chained)\n  141      , parentDb: options.parentDb || null\n  142:     // Set up the primary key factory or fallback to ObjectID\n  143:     , pkFactory: options.pkFactory || ObjectID\n  144      // Get native parser\n  145      , nativeParser: options.nativeParser || options.native_parser\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/node_modules/mongodb/lib/mongo_client.js:\n   31    'socketTimeoutMS', 'reconnectTries', 'reconnectInterval', 'ha', 'haInterval',\n   32    'replicaSet', 'secondaryAcceptableLatencyMS', 'acceptableLatencyMS',\n   33:   'connectWithNoPrimary', 'authSource', 'w', 'wtimeout', 'j', 'forceServerObjectId',\n   34    'serializeFunctions', 'ignoreUndefined', 'raw', 'promoteLongs', 'bufferMaxEntries',\n   35    'readPreference', 'pkFactory', 'promiseLibrary', 'readConcern', 'maxStalenessSeconds',\n   ..\n  108     * @param {number} [options.wtimeout=null] The write concern timeout.\n  109     * @param {boolean} [options.j=false] Specify a journal write concern.\n  110:    * @param {boolean} [options.forceServerObjectId=false] Force server to assign _id values instead of driver.\n  111     * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.\n  112     * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n  ...\n  170   * @param {number} [options.wtimeout=null] The write concern timeout.\n  171   * @param {boolean} [options.j=false] Specify a journal write concern.\n  172:  * @param {boolean} [options.forceServerObjectId=false] Force server to assign _id values instead of driver.\n  173   * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.\n  174   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/node_modules/mongodb/lib/bulk/ordered.js:\n    7  \t, shallowClone = utils.shallowClone\n    8    , BulkWriteResult = common.BulkWriteResult\n    9:   , ObjectID = require('mongodb-core').BSON.ObjectID\n   10    , Define = require('../metadata')\n   11  \t, BSON = require('mongodb-core').BSON\n   ..\n   15  var bson = new BSON([BSON.Binary, BSON.Code, BSON.DBRef, BSON.Decimal128,\n   16  \tBSON.Double, BSON.Int32, BSON.Long, BSON.Map, BSON.MaxKey, BSON.MinKey,\n   17: \tBSON.ObjectId, BSON.BSONRegExp, BSON.Symbol, BSON.Timestamp]);\n   18  \n   19  /**\n   ..\n  296  \n  297    // Set up the force server object id\n  298:   var forceServerObjectId = typeof this.s.options.forceServerObjectId == 'boolean'\n  299:     ? this.s.options.forceServerObjectId : this.s.collection.s.db.options.forceServerObjectId;\n  300  \n  301    // Update operations\n  ...\n  332    // Insert operations\n  333    if(op.insertOne && op.insertOne.document == null) {\n  334:     if(forceServerObjectId !== true && op.insertOne._id == null) op.insertOne._id = new ObjectID();\n  335      return addToOperationsList(this, common.INSERT, op.insertOne);\n  336    } else if(op.insertOne && op.insertOne.document) {\n  337:     if(forceServerObjectId !== true && op.insertOne.document._id == null) op.insertOne.document._id = new ObjectID();\n  338      return addToOperationsList(this, common.INSERT, op.insertOne.document);\n  339    }\n  ...\n  341    if(op.insertMany) {\n  342      for(var i = 0; i < op.insertMany.length; i++) {\n  343:       if(forceServerObjectId !== true && op.insertMany[i]._id == null) op.insertMany[i]._id = new ObjectID();\n  344        addToOperationsList(this, common.INSERT, op.insertMany[i]);\n  345      }\n  ...\n  360   */\n  361  OrderedBulkOperation.prototype.insert = function(document) {\n  362:   if(this.s.collection.s.db.options.forceServerObjectId !== true && document._id == null) document._id = new ObjectID();\n  363    return addToOperationsList(this, common.INSERT, document);\n  364  }\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/node_modules/mongodb/lib/bulk/unordered.js:\n    7    , shallowClone = utils.shallowClone\n    8    , BulkWriteResult = common.BulkWriteResult\n    9:   , ObjectID = require('mongodb-core').BSON.ObjectID\n   10  \t, BSON = require('mongodb-core').BSON\n   11    , Define = require('../metadata')\n   ..\n   15  var bson = new BSON([BSON.Binary, BSON.Code, BSON.DBRef, BSON.Decimal128,\n   16  \tBSON.Double, BSON.Int32, BSON.Long, BSON.Map, BSON.MaxKey, BSON.MinKey,\n   17: \tBSON.ObjectId, BSON.BSONRegExp, BSON.Symbol, BSON.Timestamp]);\n   18  \n   19  /**\n   ..\n  305   */\n  306  UnorderedBulkOperation.prototype.insert = function(document) {\n  307:   if(this.s.collection.s.db.options.forceServerObjectId !== true && document._id == null) document._id = new ObjectID();\n  308    return addToOperationsList(this, common.INSERT, document);\n  309  }\n  ...\n  341  \n  342    // Set up the force server object id\n  343:   var forceServerObjectId = typeof this.s.options.forceServerObjectId == 'boolean'\n  344:     ? this.s.options.forceServerObjectId : this.s.collection.s.db.options.forceServerObjectId;\n  345  \n  346    // Update operations\n  ...\n  375    // Insert operations\n  376    if(op.insertOne && op.insertOne.document == null) {\n  377:     if(forceServerObjectId !== true && op.insertOne._id == null) op.insertOne._id = new ObjectID();\n  378      return addToOperationsList(this, common.INSERT, op.insertOne);\n  379    } else if(op.insertOne && op.insertOne.document) {\n  380:     if(forceServerObjectId !== true && op.insertOne.document._id == null) op.insertOne.document._id = new ObjectID();\n  381      return addToOperationsList(this, common.INSERT, op.insertOne.document);\n  382    }\n  ...\n  384    if(op.insertMany) {\n  385      for(var i = 0; i < op.insertMany.length; i++) {\n  386:       if(forceServerObjectId !== true && op.insertMany[i]._id == null) op.insertMany[i]._id = new ObjectID();\n  387        addToOperationsList(this, common.INSERT, op.insertMany[i]);\n  388      }\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/node_modules/mongodb/lib/gridfs/chunk.js:\n    2  \n    3  var Binary = require('mongodb-core').BSON.Binary,\n    4:   ObjectID = require('mongodb-core').BSON.ObjectID;\n    5  \n    6  /**\n    .\n   25    var mongoObjectFinal = mongoObject == null ? {} : mongoObject;\n   26    this.writeConcern = writeConcern || {w:1};\n   27:   this.objectId = mongoObjectFinal._id == null ? new ObjectID() : mongoObjectFinal._id;\n   28    this.chunkNumber = mongoObjectFinal.n == null ? 0 : mongoObjectFinal.n;\n   29    this.data = new Binary();\n   ..\n  155      if(self.data.length() > 0) {\n  156        self.buildMongoObject(function(mongoObject) {\n  157:         var options = {forceServerObjectId:true};\n  158          for(var name in self.writeConcern) {\n  159            options[name] = self.writeConcern[name];\n  160          }\n  161  \n  162:         collection.replaceOne({'_id':self.objectId}, mongoObject, writeOptions, function(err) {\n  163            callback(err, self);\n  164          });\n  ...\n  194      'n': this.chunkNumber,\n  195      'data': this.data};\n  196:   // If we are saving using a specific ObjectId\n  197:   if(this.objectId != null) mongoObject._id = this.objectId;\n  198  \n  199    callback(mongoObject);\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/node_modules/mongodb/lib/gridfs/grid_store.js:\n   12   * var MongoClient = require('mongodb').MongoClient,\n   13   *   GridStore = require('mongodb').GridStore,\n   14:  *   ObjectID = require('mongodb').ObjectID,\n   15   *   test = require('assert');\n   16   *\n   ..\n   36   */\n   37  var Chunk = require('./chunk'),\n   38:   ObjectID = require('mongodb-core').BSON.ObjectID,\n   39    ReadPreference = require('../read_preference'),\n   40    Buffer = require('buffer').Buffer,\n   ..\n  102    }\n  103  \n  104:   if(id && id._bsontype == 'ObjectID') {\n  105      this.referenceBy = REFERENCE_BY_ID;\n  106      this.fileId = id;\n  ...\n  110      this.filename = id;\n  111      if (mode.indexOf('w') != null) {\n  112:       this.fileId = new ObjectID();\n  113      }\n  114    } else {\n  ...\n  967          self.internalMd5 = doc.md5;\n  968        } else if (self.mode != 'r') {\n  969:         self.fileId = self.fileId == null ? new ObjectID() : self.fileId;\n  970          self.contentType = GridStore.DEFAULT_CONTENT_TYPE;\n  971          self.internalChunkSize = self.internalChunkSize == null ? Chunk.DEFAULT_CHUNK_SIZE : self.internalChunkSize;\n  ...\n  973        } else {\n  974          self.length = 0;\n  975:         var txtId = self.fileId._bsontype == \"ObjectID\" ? self.fileId.toHexString() : self.fileId;\n  976          return error(MongoError.create({message: f(\"file with id %s not opened for writing\", (self.referenceBy == REFERENCE_BY_ID ? txtId : self.filename)), driver:true}), self);\n  977        }\n  ...\n 1020    } else {\n 1021      // Write only mode\n 1022:     self.fileId = null == self.fileId ? new ObjectID() : self.fileId;\n 1023      self.contentType = GridStore.DEFAULT_CONTENT_TYPE;\n 1024      self.internalChunkSize = self.internalChunkSize == null ? Chunk.DEFAULT_CHUNK_SIZE : self.internalChunkSize;\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/node_modules/mongodb/lib/gridfs-stream/index.js:\n  128   * data from GridFS.\n  129   * @method\n  130:  * @param {ObjectId} id The id of the file doc\n  131   * @param {Object} [options=null] Optional settings.\n  132   * @param {Number} [options.start=null] Optional 0-based offset in bytes to start streaming from\n  ...\n  149   * Deletes a file with the given id\n  150   * @method\n  151:  * @param {ObjectId} id The id of the file doc\n  152   * @param {GridFSBucket~errorCallback} [callback]\n  153   */\n  ...\n  279   * Renames the file with the given _id to the given string\n  280   * @method\n  281:  * @param {ObjectId} id the id of the file to rename\n  282   * @param {String} filename new name for the file\n  283   * @param {GridFSBucket~errorCallback} [callback]\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/node_modules/mongodb/lib/gridfs-stream/upload.js:\n   35    this.options = options;\n   36  \n   37:   this.id = options.id ? options.id : core.BSON.ObjectId();\n   38    this.chunkSizeBytes = this.options.chunkSizeBytes;\n   39    this.bufToStore = new Buffer(this.chunkSizeBytes);\n   ..\n  188  function createChunkDoc(filesId, n, data) {\n  189    return {\n  190:     _id: core.BSON.ObjectId(),\n  191      files_id: filesId,\n  192      n: n,\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/conf.json:\n   19        \"node_modules/bson/lib/bson/double.js\",\n   20        \"node_modules/bson/lib/bson/long.js\",\n   21:       \"node_modules/bson/lib/bson/objectid.js\",\n   22        \"node_modules/bson/lib/bson/symbol.js\",\n   23        \"node_modules/bson/lib/bson/timestamp.js\",\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/HISTORY.md:\n   41  2.1.4 2017-01-03\n   42  ----------------\n   43: * updated bson and bson-ext dependencies to 1.0.3 due to util.inspect issue with ObjectId optimizations.\n   44  \n   45  2.1.3 2017-01-03\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/lib/topologies/mongos.js:\n  130      bson: options.bson || new BSON([BSON.Binary, BSON.Code, BSON.DBRef, BSON.Decimal128,\n  131        BSON.Double, BSON.Int32, BSON.Long, BSON.Map, BSON.MaxKey, BSON.MinKey,\n  132:       BSON.ObjectId, BSON.BSONRegExp, BSON.Symbol, BSON.Timestamp]),\n  133      // Factory overrides\n  134      Cursor: options.cursorFactory || BasicCursor,\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/lib/topologies/replset.js:\n  139      bson: options.bson || new BSON([BSON.Binary, BSON.Code, BSON.DBRef, BSON.Decimal128,\n  140        BSON.Double, BSON.Int32, BSON.Long, BSON.Map, BSON.MaxKey, BSON.MinKey,\n  141:       BSON.ObjectId, BSON.BSONRegExp, BSON.Symbol, BSON.Timestamp]),\n  142      // Factory overrides\n  143      Cursor: options.cursorFactory || BasicCursor,\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/lib/topologies/replset_state.js:\n  337        this.maxElectionId = ismasterElectionId;\n  338      } else if(this.maxElectionId && ismasterElectionId) {\n  339:       var result = compareObjectIds(this.maxElectionId, ismasterElectionId);\n  340        // Get the electionIds\n  341        var ismasterSetVersion = server.lastIsMaster().setVersion;\n  ...\n  410      // Check if we need to replace the server\n  411      if(currentElectionId && ismasterElectionId) {\n  412:       result = compareObjectIds(currentElectionId, ismasterElectionId);\n  413  \n  414        if(result == 1) {\n  ...\n  427        this.maxElectionId = ismasterElectionId;\n  428      } else if(this.maxElectionId && ismasterElectionId) {\n  429:       result = compareObjectIds(this.maxElectionId, ismasterElectionId);\n  430  \n  431        if(result == 1) {\n  ...\n  864  }\n  865  \n  866: function compareObjectIds(id1, id2) {\n  867    var a = new Buffer(id1.toHexString(), 'hex');\n  868    var b = new Buffer(id2.toHexString(), 'hex');\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/node_modules/mongodb/node_modules/mongodb-core/lib/topologies/server.js:\n  100      bson: options.bson || new BSON([BSON.Binary, BSON.Code, BSON.DBRef, BSON.Decimal128,\n  101        BSON.Double, BSON.Int32, BSON.Long, BSON.Map, BSON.MaxKey, BSON.MinKey,\n  102:       BSON.ObjectId, BSON.BSONRegExp, BSON.Symbol, BSON.Timestamp]),\n  103      // Pool\n  104      pool: null,\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/node_modules/mquery/History.md:\n  145  ==================\n  146  \n  147:  * fixed; cloning ObjectId constructors\n  148   * fixed; cloning of ReadPreferences #30 [ashtuchkin](https://github.com/ashtuchkin)\n  149   * tests; use specific mongodb version #29 [AvianFlu](https://github.com/AvianFlu)\n  150:  * tests; remove dependency on ObjectId #28 [refack](https://github.com/refack)\n  151   * tests; add failing ReadPref test\n  152  \n  ...\n  162   * removed; mongodb driver dependency #26 [ashtuchkin](https://github.com/ashtuchkin)\n  163   * removed; first class support of read preference tags #26 (still supported though) [ashtuchkin](https://github.com/ashtuchkin)\n  164:  * added; better ObjectId clone support\n  165   * fixed; cloning objects that have no constructor #21\n  166   * docs; cleaned up [ashtuchkin](https://github.com/ashtuchkin)\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/node_modules/mquery/README.md:\n 1184  ## General compatibility\n 1185  \n 1186: #### ObjectIds\n 1187  \n 1188  `mquery` clones query arguments before passing them to a `collection` method for execution.\n 1189  This prevents accidental side-affects to the objects you pass.\n 1190: To clone `ObjectIds` we need to make some assumptions.\n 1191  \n 1192: First, to check if an object is an `ObjectId`, we check its constructors name. If it matches either\n 1193: `ObjectId` or `ObjectID` we clone it.\n 1194  \n 1195: To clone `ObjectIds`, we call its optional `clone` method. If a `clone` method does not exist, we fall\n 1196  back to calling `new obj.constructor(obj.id)`. We assume, for compatibility with the\n 1197: Node.js driver, that the `ObjectId` instance has a public `id` property and that\n 1198: when creating an `ObjectId` instance we can pass that `id` as an argument.\n 1199  \n 1200  #### Read Preferences\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/node_modules/mquery/lib/env.js:\n    9  exports.isMongo = !exports.isNode\n   10             && 'function' == typeof printjson\n   11:            && 'function' == typeof ObjectId\n   12             && 'function' == typeof rs\n   13             && 'function' == typeof sh;\n\n/Users/matthewbrandman/ow_server/node_modules/mongoose/node_modules/mquery/test/utils.test.js:\n   10  describe('lib/utils', function() {\n   11    describe('clone', function() {\n   12:     it('clones constructors named ObjectId', function(done) {\n   13:       function ObjectId (id) {\n   14          this.id = id;\n   15        }\n   16  \n   17:       var o1 = new ObjectId('1234');\n   18        var o2 = utils.clone(o1);\n   19:       assert.ok(o2 instanceof ObjectId);\n   20  \n   21        done();\n   22      });\n   23  \n   24:     it('clones constructors named ObjectID', function(done) {\n   25:       function ObjectID (id) {\n   26          this.id = id;\n   27        }\n   28  \n   29:       var o1 = new ObjectID('1234');\n   30        var o2 = utils.clone(o1);\n   31  \n   32:       assert.ok(o2 instanceof ObjectID);\n   33        done();\n   34      });\n   35  \n   36:     it('does not clone constructors named ObjectIdd', function(done) {\n   37:       function ObjectIdd (id) {\n   38          this.id = id;\n   39        }\n   40  \n   41:       var o1 = new ObjectIdd('1234');\n   42        var o2 = utils.clone(o1);\n   43:       assert.ok(!(o2 instanceof ObjectIdd));\n   44  \n   45        done();\n   46      });\n   47  \n   48:     it('optionally clones ObjectId constructors using its clone method', function(done) {\n   49:       function ObjectID (id) {\n   50          this.id = id;\n   51          this.cloned = false;\n   52        }\n   53  \n   54:       ObjectID.prototype.clone = function () {\n   55:         var ret = new ObjectID(this.id);\n   56          ret.cloned = true;\n   57          return ret;\n   ..\n   59  \n   60        var id = 1234;\n   61:       var o1 = new ObjectID(id);\n   62        assert.equal(id, o1.id);\n   63        assert.equal(false, o1.cloned);\n   64  \n   65        var o2 = utils.clone(o1);\n   66:       assert.ok(o2 instanceof ObjectID);\n   67        assert.equal(id, o2.id);\n   68        assert.ok(o2.cloned);\n\n/Users/matthewbrandman/ow_server/routes/match.js:\n    7  /* GET users listing. */\n    8  router.get('/', passport.authenticate('jwt', {session: false}), function(req, res, next) {\n    9: \tvar s = new mongoose.mongo.ObjectID(req.user._id)\n   10  \tconsole.log(s);\n   11  \tMatch.find(\n\n569 matches across 70 files\n",
			"settings":
			{
				"buffer_size": 89269,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "models/user.js",
			"settings":
			{
				"buffer_size": 647,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Anaconda Python Builder",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				],
				[
					"Packages/User/untitled.sublime-build",
					""
				]
			],
			[
				"Packages/User/untitled.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				]
			],
			[
				"Packages/C++/C++ Single File.sublime-build",
				"Run"
			]
		],
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 207.0,
		"last_filter": "insta",
		"selected_items":
		[
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"re",
				"Package Control: Remove Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"remove ",
				"Package Control: Remove Package"
			],
			[
				"brow",
				"SFTP: Browse Server…"
			],
			[
				"bro",
				"SFTP: Browse Server…"
			],
			[
				"br",
				"SFTP: Browse Server…"
			],
			[
				"vir",
				"Virtualenv: Activate"
			],
			[
				"virt",
				"Virtualenv: Activate"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"list",
				"Package Control: List Packages"
			],
			[
				"browse ",
				"Preferences: Browse Packages"
			],
			[
				"browse",
				"Preferences: Browse Packages"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"brows",
				"Preferences: Browse Packages"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"package control",
				"Package Control: Install Package"
			],
			[
				"package",
				"Package Control: Install Package"
			],
			[
				"",
				"Anaconda: Autoformat PEP8 Errors"
			],
			[
				"anaconda ",
				"Anaconda: Disable linting on this file"
			]
		],
		"width": 388.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"kill ",
			"django-admin.py changepassword",
			"runserver",
			"manage.py runserver",
			"python manage.py runserver",
			"cd",
			"ls",
			"python manage.py runserver",
			"import urllib.request,os,hashlib; h = '2deb499853c4371624f5a07e27c334aa' + 'bf8c4e67d14fb0525ba4f89698a6d7e1'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
			"asdf"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/matthewbrandman/ow_server",
		"/Users/matthewbrandman/ow_server/bin",
		"/Users/matthewbrandman/ow_server/game-code",
		"/Users/matthewbrandman/ow_server/models",
		"/Users/matthewbrandman/ow_server/node_modules/.bin",
		"/Users/matthewbrandman/ow_server/node_modules/component-emitter",
		"/Users/matthewbrandman/ow_server/node_modules/dateformat",
		"/Users/matthewbrandman/ow_server/node_modules/mongoose/lib",
		"/Users/matthewbrandman/ow_server/node_modules/passport/lib",
		"/Users/matthewbrandman/ow_server/node_modules/socket.io",
		"/Users/matthewbrandman/ow_server/node_modules/socket.io/lib",
		"/Users/matthewbrandman/ow_server/routes"
	],
	"file_history":
	[
		"/Users/matthewbrandman/ow_server/bin/www",
		"/Users/matthewbrandman/ow_server/game-code/pug-game.js",
		"/Users/matthewbrandman/ow_server/app.js",
		"/Users/matthewbrandman/ow_server/models/match.js",
		"/Users/matthewbrandman/ow_server/routes/index.js",
		"/Users/matthewbrandman/ow_server/models/user.js",
		"/Users/matthewbrandman/ow_server/node_modules/mongoose/node_modules/mquery/lib/utils.js",
		"/Users/matthewbrandman/ow_server/models/queue-entry.js",
		"/Users/matthewbrandman/ow_server/routes/match.js",
		"/Users/matthewbrandman/ow_server/config/kue-tasks.js",
		"/Users/matthewbrandman/ow_server/routes/users.js",
		"/Users/matthewbrandman/ow_server/config/kue-tasks.py",
		"/Users/matthewbrandman/ow_server/node_modules/express/lib/express.js",
		"/Users/matthewbrandman/ow_server/node_modules/passport-jwt/lib/strategy.js",
		"/Users/matthewbrandman/ow_server/node_modules/passport-jwt/lib/extract_jwt.js",
		"/Users/matthewbrandman/ow_server/node_modules/passport-jwt/lib/verify_jwt.js",
		"/Users/matthewbrandman/ow_server/express_ow.sublime-project",
		"/Users/matthewbrandman/overwatchSite/src/app/players/player.module.ts",
		"/Users/matthewbrandman/ow_server/package.json",
		"/Users/matthewbrandman/ow_server/config/passport.js",
		"/Users/matthewbrandman/Downloads/10.1111%2Fj.1467-971X.2011.01737.x.txt",
		"/Users/matthewbrandman/Downloads/mongodb-osx-x86_64-3.4.4/README",
		"/Users/matthewbrandman/dentalfocus/core/static/views/add_lead_modal.html",
		"/Users/matthewbrandman/overwatchSite/src/app/player-detail.component.ts",
		"/Users/matthewbrandman/overwatchSite/src/systemjs.config.js",
		"/Users/matthewbrandman/myoverwatch/myoverwatch/settings.pyc",
		"/Users/matthewbrandman/myoverwatch/userprofile/models.py",
		"/Users/matthewbrandman/myoverwatch/myoverwatch/settings.py",
		"/Users/matthewbrandman/myoverwatch/myoverwatch/urls.pyc"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"*.*",
			"<current file>",
			"",
			"*.*",
			"<current file>",
			"*.*",
			"/Users/matthewbrandman/rushmanager/templates/comments/comment_list.html",
			"*.*",
			"",
			"/Users/matthewbrandman/Downloads/__jquery.tablesorter/themes/blue"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"update",
			"ObjectID",
			"userid",
			"socket",
			".on",
			"message",
			"name",
			"this",
			"queue",
			"methods.",
			"methods",
			"new",
			"queue",
			"req.u",
			"kue",
			"byid",
			".list",
			"index",
			"routes",
			"Number",
			"String",
			"default",
			"auth_sc",
			"jwtOptions.secretOrKey",
			"develo",
			"account",
			"from",
			"user",
			"name",
			"current_status",
			"name",
			"heroform",
			"leadmodalin",
			"sopix",
			"cdn_name",
			"10-",
			"lock.a",
			"server_socket",
			"print",
			"output.f",
			"cs5",
			"endpoint",
			"print",
			"compute",
			",",
			"argv",
			"print",
			"send_res",
			"choose_fas",
			"get_late",
			"queue",
			"build",
			"quer",
			"socket",
			"port",
			"53",
			"new_fre",
			"value",
			"null",
			"joins",
			"choose_fa",
			"thread",
			"pure3",
			"get_variance",
			"cdn",
			"6c",
			"lua",
			"Bandwidth:",
			"andwidth:",
			"Bandwidth: 7",
			"bandwidth",
			"verage CBR bandwidth at",
			"Average TCP bandwidth at",
			"Average CBR latency from source",
			"Average TCP latency from",
			"Average TCP bandwidth a",
			"Average TCP latency",
			"ropped TCP packets",
			"Average CBR bandwidth",
			"^\\n",
			"\\n",
			"^/",
			"Average TCP latency",
			"to",
			"verage TCP bandwidth",
			"during",
			"RED",
			"DropTail",
			"RED",
			"red",
			"seconds",
			"\\t",
			"auto_f",
			"d",
			"instance",
			"date ",
			"date",
			"x ",
			"add",
			"ng-repeat",
			"leadeditinst",
			"update",
			"modalinstancecontro",
			"edit",
			"enter ",
			"r",
			"T",
			"ó",
			" ",
			"8",
			"12",
			"k",
			"0000 001",
			"setting",
			"styles.css",
			"getHeroes",
			"reset_to",
			"to_inter",
			"organization",
			"autocom",
			"Rushperiod",
			"organization",
			"auto",
			"foreign",
			"organ",
			"sameorg",
			"organization",
			"get_us"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"{ type: Number, default: 0 } ",
			"secretKey",
			"legacy",
			"current_status",
			"entering_semester",
			"legacy",
			"current_status",
			"entering_semester",
			"entering_year",
			"None",
			"id",
			"",
			"DropTail",
			"RED",
			"DropTail",
			"RED",
			"    ",
			"f",
			"7",
			"6",
			"",
			"objects",
			"70",
			"datetime.datetime.now()",
			"",
			"tenant_objects",
			"objects",
			"rushId",
			"x",
			"user.organization",
			"from rushtracker.models import Rush",
			"from authentication.models import UserProfile",
			"",
			"rush."
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "routes/index.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3262,
						"regions":
						{
						},
						"selection":
						[
							[
								1079,
								1079
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 107.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "app.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2393,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 181.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "game-code/pug-game.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3645,
						"regions":
						{
						},
						"selection":
						[
							[
								1357,
								1357
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 378.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "models/match.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 645,
						"regions":
						{
						},
						"selection":
						[
							[
								549,
								549
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "routes/match.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 505,
						"regions":
						{
						},
						"selection":
						[
							[
								419,
								419
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "routes/users.js",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 242,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 6,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 89269,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										184,
										192
									],
									[
										364,
										372
									],
									[
										581,
										589
									],
									[
										848,
										856
									],
									[
										1247,
										1255
									],
									[
										1432,
										1440
									],
									[
										1864,
										1872
									],
									[
										2176,
										2184
									],
									[
										2531,
										2539
									],
									[
										2851,
										2859
									],
									[
										3224,
										3232
									],
									[
										3608,
										3616
									],
									[
										3944,
										3952
									],
									[
										4269,
										4277
									],
									[
										4548,
										4556
									],
									[
										4818,
										4826
									],
									[
										5093,
										5101
									],
									[
										5352,
										5360
									],
									[
										5672,
										5680
									],
									[
										5741,
										5749
									],
									[
										5926,
										5934
									],
									[
										6211,
										6219
									],
									[
										6415,
										6423
									],
									[
										6433,
										6441
									],
									[
										6509,
										6517
									],
									[
										6789,
										6797
									],
									[
										6815,
										6823
									],
									[
										6918,
										6926
									],
									[
										7037,
										7045
									],
									[
										7136,
										7144
									],
									[
										7150,
										7158
									],
									[
										7164,
										7172
									],
									[
										7178,
										7186
									],
									[
										7396,
										7404
									],
									[
										7628,
										7636
									],
									[
										7870,
										7878
									],
									[
										8094,
										8102
									],
									[
										8324,
										8332
									],
									[
										8532,
										8540
									],
									[
										8750,
										8758
									],
									[
										9251,
										9259
									],
									[
										9510,
										9518
									],
									[
										9527,
										9535
									],
									[
										9738,
										9746
									],
									[
										9814,
										9822
									],
									[
										9840,
										9848
									],
									[
										9878,
										9886
									],
									[
										10103,
										10111
									],
									[
										10131,
										10139
									],
									[
										10522,
										10530
									],
									[
										10836,
										10844
									],
									[
										11042,
										11050
									],
									[
										11236,
										11244
									],
									[
										11618,
										11626
									],
									[
										12191,
										12199
									],
									[
										12570,
										12578
									],
									[
										12809,
										12817
									],
									[
										12997,
										13005
									],
									[
										13014,
										13022
									],
									[
										13225,
										13233
									],
									[
										13301,
										13309
									],
									[
										13327,
										13335
									],
									[
										13365,
										13373
									],
									[
										13654,
										13662
									],
									[
										13882,
										13890
									],
									[
										14003,
										14011
									],
									[
										14241,
										14249
									],
									[
										14364,
										14372
									],
									[
										14526,
										14534
									],
									[
										14559,
										14567
									],
									[
										14695,
										14703
									],
									[
										14713,
										14721
									],
									[
										14820,
										14828
									],
									[
										14845,
										14853
									],
									[
										15007,
										15015
									],
									[
										15199,
										15207
									],
									[
										15451,
										15459
									],
									[
										15482,
										15490
									],
									[
										15491,
										15499
									],
									[
										15752,
										15760
									],
									[
										15780,
										15788
									],
									[
										15933,
										15941
									],
									[
										15958,
										15966
									],
									[
										16136,
										16144
									],
									[
										16170,
										16178
									],
									[
										16308,
										16316
									],
									[
										16346,
										16354
									],
									[
										16402,
										16410
									],
									[
										16596,
										16604
									],
									[
										16830,
										16838
									],
									[
										16852,
										16860
									],
									[
										17121,
										17129
									],
									[
										17164,
										17172
									],
									[
										17188,
										17196
									],
									[
										17227,
										17235
									],
									[
										17254,
										17262
									],
									[
										17342,
										17350
									],
									[
										17527,
										17535
									],
									[
										17577,
										17585
									],
									[
										17879,
										17887
									],
									[
										17923,
										17931
									],
									[
										18264,
										18272
									],
									[
										18302,
										18310
									],
									[
										18584,
										18592
									],
									[
										18619,
										18627
									],
									[
										18859,
										18867
									],
									[
										18881,
										18889
									],
									[
										19162,
										19170
									],
									[
										19205,
										19213
									],
									[
										19229,
										19237
									],
									[
										19268,
										19276
									],
									[
										19298,
										19306
									],
									[
										19386,
										19394
									],
									[
										19566,
										19574
									],
									[
										19587,
										19595
									],
									[
										19787,
										19795
									],
									[
										19809,
										19817
									],
									[
										19931,
										19939
									],
									[
										20229,
										20237
									],
									[
										20331,
										20339
									],
									[
										20445,
										20453
									],
									[
										20516,
										20524
									],
									[
										20591,
										20599
									],
									[
										20614,
										20622
									],
									[
										20698,
										20706
									],
									[
										20763,
										20771
									],
									[
										20796,
										20804
									],
									[
										20858,
										20866
									],
									[
										20943,
										20951
									],
									[
										21045,
										21053
									],
									[
										21181,
										21189
									],
									[
										21382,
										21390
									],
									[
										21465,
										21473
									],
									[
										21778,
										21786
									],
									[
										21943,
										21951
									],
									[
										22035,
										22043
									],
									[
										22113,
										22121
									],
									[
										22289,
										22297
									],
									[
										22570,
										22578
									],
									[
										22688,
										22696
									],
									[
										22816,
										22824
									],
									[
										22845,
										22853
									],
									[
										23014,
										23022
									],
									[
										23334,
										23342
									],
									[
										23611,
										23619
									],
									[
										23633,
										23641
									],
									[
										23879,
										23887
									],
									[
										24044,
										24052
									],
									[
										24225,
										24233
									],
									[
										24387,
										24395
									],
									[
										24497,
										24505
									],
									[
										24540,
										24548
									],
									[
										24718,
										24726
									],
									[
										24740,
										24748
									],
									[
										24763,
										24771
									],
									[
										24799,
										24807
									],
									[
										24968,
										24976
									],
									[
										25181,
										25189
									],
									[
										25387,
										25395
									],
									[
										25574,
										25582
									],
									[
										25783,
										25791
									],
									[
										25813,
										25821
									],
									[
										26109,
										26117
									],
									[
										26131,
										26139
									],
									[
										26306,
										26314
									],
									[
										26416,
										26424
									],
									[
										26459,
										26467
									],
									[
										26498,
										26506
									],
									[
										26531,
										26539
									],
									[
										26573,
										26581
									],
									[
										26753,
										26761
									],
									[
										26881,
										26889
									],
									[
										27037,
										27045
									],
									[
										27181,
										27189
									],
									[
										27290,
										27298
									],
									[
										27499,
										27507
									],
									[
										27534,
										27542
									],
									[
										27751,
										27759
									],
									[
										28062,
										28070
									],
									[
										28179,
										28187
									],
									[
										28589,
										28597
									],
									[
										28620,
										28628
									],
									[
										28808,
										28816
									],
									[
										28819,
										28827
									],
									[
										28841,
										28849
									],
									[
										28852,
										28860
									],
									[
										29131,
										29139
									],
									[
										29345,
										29353
									],
									[
										29356,
										29364
									],
									[
										29379,
										29387
									],
									[
										29390,
										29398
									],
									[
										29583,
										29591
									],
									[
										29782,
										29790
									],
									[
										29959,
										29967
									],
									[
										29970,
										29978
									],
									[
										30114,
										30122
									],
									[
										30337,
										30345
									],
									[
										30375,
										30383
									],
									[
										30397,
										30405
									],
									[
										30432,
										30440
									],
									[
										30452,
										30460
									],
									[
										30504,
										30512
									],
									[
										30570,
										30578
									],
									[
										30624,
										30632
									],
									[
										30646,
										30654
									],
									[
										30698,
										30706
									],
									[
										30769,
										30777
									],
									[
										31078,
										31086
									],
									[
										31349,
										31357
									],
									[
										31474,
										31482
									],
									[
										31579,
										31587
									],
									[
										31599,
										31607
									],
									[
										31621,
										31629
									],
									[
										31632,
										31640
									],
									[
										31773,
										31781
									],
									[
										31949,
										31957
									],
									[
										32011,
										32019
									],
									[
										32191,
										32199
									],
									[
										32201,
										32209
									],
									[
										32426,
										32434
									],
									[
										32562,
										32570
									],
									[
										32695,
										32703
									],
									[
										32733,
										32741
									],
									[
										32835,
										32843
									],
									[
										32896,
										32904
									],
									[
										32914,
										32922
									],
									[
										33002,
										33010
									],
									[
										33040,
										33048
									],
									[
										33142,
										33150
									],
									[
										33300,
										33308
									],
									[
										33434,
										33442
									],
									[
										33614,
										33622
									],
									[
										33755,
										33763
									],
									[
										33784,
										33792
									],
									[
										33882,
										33890
									],
									[
										34037,
										34045
									],
									[
										34127,
										34135
									],
									[
										34222,
										34230
									],
									[
										34254,
										34262
									],
									[
										34371,
										34379
									],
									[
										34494,
										34502
									],
									[
										34689,
										34697
									],
									[
										34860,
										34868
									],
									[
										35015,
										35023
									],
									[
										35211,
										35219
									],
									[
										35435,
										35443
									],
									[
										35544,
										35552
									],
									[
										35608,
										35616
									],
									[
										35676,
										35684
									],
									[
										35734,
										35742
									],
									[
										35791,
										35799
									],
									[
										35935,
										35943
									],
									[
										35964,
										35972
									],
									[
										35994,
										36002
									],
									[
										36291,
										36299
									],
									[
										36322,
										36330
									],
									[
										36412,
										36420
									],
									[
										36460,
										36468
									],
									[
										36546,
										36554
									],
									[
										36611,
										36619
									],
									[
										36640,
										36648
									],
									[
										36670,
										36678
									],
									[
										37041,
										37049
									],
									[
										37137,
										37145
									],
									[
										37246,
										37254
									],
									[
										37301,
										37309
									],
									[
										37451,
										37459
									],
									[
										37570,
										37578
									],
									[
										37789,
										37797
									],
									[
										37954,
										37962
									],
									[
										37988,
										37996
									],
									[
										37999,
										38007
									],
									[
										38033,
										38041
									],
									[
										38044,
										38052
									],
									[
										38280,
										38288
									],
									[
										38308,
										38316
									],
									[
										38586,
										38594
									],
									[
										38622,
										38630
									],
									[
										38875,
										38883
									],
									[
										39156,
										39164
									],
									[
										39292,
										39300
									],
									[
										39500,
										39508
									],
									[
										39536,
										39544
									],
									[
										39702,
										39710
									],
									[
										39911,
										39919
									],
									[
										40204,
										40212
									],
									[
										40411,
										40419
									],
									[
										40458,
										40466
									],
									[
										40795,
										40803
									],
									[
										40842,
										40850
									],
									[
										41167,
										41175
									],
									[
										41214,
										41222
									],
									[
										41440,
										41448
									],
									[
										41601,
										41609
									],
									[
										41809,
										41817
									],
									[
										41845,
										41853
									],
									[
										42267,
										42275
									],
									[
										42302,
										42310
									],
									[
										42661,
										42669
									],
									[
										42683,
										42691
									],
									[
										42838,
										42846
									],
									[
										43010,
										43018
									],
									[
										43021,
										43029
									],
									[
										43297,
										43305
									],
									[
										43325,
										43333
									],
									[
										43600,
										43608
									],
									[
										43815,
										43823
									],
									[
										43851,
										43859
									],
									[
										43873,
										43881
									],
									[
										43904,
										43912
									],
									[
										43924,
										43932
									],
									[
										43974,
										43982
									],
									[
										44037,
										44045
									],
									[
										44088,
										44096
									],
									[
										44110,
										44118
									],
									[
										44159,
										44167
									],
									[
										44229,
										44237
									],
									[
										44432,
										44440
									],
									[
										44624,
										44632
									],
									[
										44943,
										44951
									],
									[
										45066,
										45074
									],
									[
										45302,
										45310
									],
									[
										45416,
										45424
									],
									[
										45518,
										45526
									],
									[
										45538,
										45546
									],
									[
										45558,
										45566
									],
									[
										45569,
										45577
									],
									[
										45701,
										45709
									],
									[
										45867,
										45875
									],
									[
										45925,
										45933
									],
									[
										46097,
										46105
									],
									[
										46107,
										46115
									],
									[
										46321,
										46329
									],
									[
										46446,
										46454
									],
									[
										46570,
										46578
									],
									[
										46608,
										46616
									],
									[
										46699,
										46707
									],
									[
										46757,
										46765
									],
									[
										46775,
										46783
									],
									[
										46856,
										46864
									],
									[
										46894,
										46902
									],
									[
										46985,
										46993
									],
									[
										47133,
										47141
									],
									[
										47256,
										47264
									],
									[
										47422,
										47430
									],
									[
										47638,
										47646
									],
									[
										47667,
										47675
									],
									[
										47755,
										47763
									],
									[
										47900,
										47908
									],
									[
										47984,
										47992
									],
									[
										48077,
										48085
									],
									[
										48105,
										48113
									],
									[
										48217,
										48225
									],
									[
										48335,
										48343
									],
									[
										48525,
										48533
									],
									[
										48691,
										48699
									],
									[
										48841,
										48849
									],
									[
										49026,
										49034
									],
									[
										49238,
										49246
									],
									[
										49338,
										49346
									],
									[
										49401,
										49409
									],
									[
										49462,
										49470
									],
									[
										49520,
										49528
									],
									[
										49577,
										49585
									],
									[
										49713,
										49721
									],
									[
										49742,
										49750
									],
									[
										49768,
										49776
									],
									[
										50059,
										50067
									],
									[
										50088,
										50096
									],
									[
										50169,
										50177
									],
									[
										50217,
										50225
									],
									[
										50297,
										50305
									],
									[
										50360,
										50368
									],
									[
										50389,
										50397
									],
									[
										50415,
										50423
									],
									[
										50725,
										50733
									],
									[
										50845,
										50853
									],
									[
										50934,
										50942
									],
									[
										51037,
										51045
									],
									[
										51088,
										51096
									],
									[
										51227,
										51235
									],
									[
										51336,
										51344
									],
									[
										51545,
										51553
									],
									[
										51700,
										51708
									],
									[
										51732,
										51740
									],
									[
										51743,
										51751
									],
									[
										51775,
										51783
									],
									[
										51786,
										51794
									],
									[
										52029,
										52037
									],
									[
										52052,
										52060
									],
									[
										52063,
										52071
									],
									[
										52465,
										52473
									],
									[
										52500,
										52508
									],
									[
										52890,
										52898
									],
									[
										52913,
										52921
									],
									[
										52924,
										52932
									],
									[
										53146,
										53154
									],
									[
										53407,
										53415
									],
									[
										53530,
										53538
									],
									[
										53815,
										53823
									],
									[
										53838,
										53846
									],
									[
										53849,
										53857
									],
									[
										53990,
										53998
									],
									[
										54188,
										54196
									],
									[
										54468,
										54476
									],
									[
										54663,
										54671
									],
									[
										54708,
										54716
									],
									[
										55054,
										55062
									],
									[
										55099,
										55107
									],
									[
										55433,
										55441
									],
									[
										55478,
										55486
									],
									[
										55692,
										55700
									],
									[
										55842,
										55850
									],
									[
										56143,
										56151
									],
									[
										56456,
										56464
									],
									[
										56840,
										56848
									],
									[
										57256,
										57264
									],
									[
										57569,
										57577
									],
									[
										58136,
										58144
									],
									[
										58744,
										58752
									],
									[
										58765,
										58773
									],
									[
										59129,
										59137
									],
									[
										59349,
										59357
									],
									[
										59662,
										59670
									],
									[
										60019,
										60027
									],
									[
										60229,
										60237
									],
									[
										60915,
										60923
									],
									[
										61322,
										61330
									],
									[
										61688,
										61696
									],
									[
										61973,
										61981
									],
									[
										62410,
										62418
									],
									[
										62450,
										62458
									],
									[
										62673,
										62681
									],
									[
										62694,
										62702
									],
									[
										62719,
										62727
									],
									[
										62740,
										62748
									],
									[
										63027,
										63035
									],
									[
										63067,
										63075
									],
									[
										63293,
										63301
									],
									[
										63412,
										63420
									],
									[
										63476,
										63484
									],
									[
										63823,
										63831
									],
									[
										64096,
										64104
									],
									[
										64683,
										64691
									],
									[
										64956,
										64964
									],
									[
										65419,
										65427
									],
									[
										65456,
										65464
									],
									[
										65510,
										65518
									],
									[
										65550,
										65558
									],
									[
										65656,
										65664
									],
									[
										66011,
										66019
									],
									[
										66140,
										66148
									],
									[
										66177,
										66185
									],
									[
										66231,
										66239
									],
									[
										66271,
										66279
									],
									[
										66349,
										66357
									],
									[
										66716,
										66724
									],
									[
										67203,
										67211
									],
									[
										67267,
										67275
									],
									[
										67855,
										67863
									],
									[
										67919,
										67927
									],
									[
										67961,
										67969
									],
									[
										68522,
										68530
									],
									[
										68795,
										68803
									],
									[
										69251,
										69259
									],
									[
										69446,
										69454
									],
									[
										69724,
										69732
									],
									[
										69759,
										69767
									],
									[
										70013,
										70021
									],
									[
										70435,
										70443
									],
									[
										70960,
										70968
									],
									[
										71399,
										71407
									],
									[
										71453,
										71461
									],
									[
										71911,
										71919
									],
									[
										72325,
										72333
									],
									[
										72825,
										72833
									],
									[
										73318,
										73326
									],
									[
										73358,
										73366
									],
									[
										73636,
										73644
									],
									[
										73797,
										73805
									],
									[
										73841,
										73849
									],
									[
										73902,
										73910
									],
									[
										73955,
										73963
									],
									[
										74125,
										74133
									],
									[
										74195,
										74203
									],
									[
										74366,
										74374
									],
									[
										74454,
										74462
									],
									[
										74681,
										74689
									],
									[
										74759,
										74767
									],
									[
										74996,
										75004
									],
									[
										75058,
										75066
									],
									[
										75355,
										75363
									],
									[
										75395,
										75403
									],
									[
										75673,
										75681
									],
									[
										75891,
										75899
									],
									[
										75953,
										75961
									],
									[
										76126,
										76134
									],
									[
										76170,
										76178
									],
									[
										76231,
										76239
									],
									[
										76284,
										76292
									],
									[
										76454,
										76462
									],
									[
										76524,
										76532
									],
									[
										76695,
										76703
									],
									[
										76783,
										76791
									],
									[
										77010,
										77018
									],
									[
										77088,
										77096
									],
									[
										77358,
										77366
									],
									[
										77398,
										77406
									],
									[
										77571,
										77579
									],
									[
										77617,
										77625
									],
									[
										77914,
										77922
									],
									[
										78114,
										78122
									],
									[
										78342,
										78350
									],
									[
										78368,
										78376
									],
									[
										78409,
										78417
									],
									[
										78688,
										78696
									],
									[
										78718,
										78726
									],
									[
										78841,
										78849
									],
									[
										78881,
										78889
									],
									[
										79052,
										79060
									],
									[
										79253,
										79261
									],
									[
										79444,
										79452
									],
									[
										79773,
										79781
									],
									[
										80132,
										80140
									],
									[
										80509,
										80517
									],
									[
										80794,
										80802
									],
									[
										81006,
										81014
									],
									[
										81364,
										81372
									],
									[
										81597,
										81605
									],
									[
										81915,
										81923
									],
									[
										82289,
										82297
									],
									[
										82673,
										82681
									],
									[
										83149,
										83157
									],
									[
										83584,
										83592
									],
									[
										83888,
										83896
									],
									[
										84131,
										84139
									],
									[
										84267,
										84275
									],
									[
										84727,
										84735
									],
									[
										84974,
										84982
									],
									[
										85216,
										85224
									],
									[
										85575,
										85583
									],
									[
										85870,
										85878
									],
									[
										86074,
										86082
									],
									[
										86170,
										86178
									],
									[
										86242,
										86250
									],
									[
										86256,
										86264
									],
									[
										86304,
										86312
									],
									[
										86522,
										86530
									],
									[
										86602,
										86610
									],
									[
										86919,
										86927
									],
									[
										87238,
										87246
									],
									[
										87288,
										87296
									],
									[
										87382,
										87390
									],
									[
										87476,
										87484
									],
									[
										87580,
										87588
									],
									[
										87630,
										87638
									],
									[
										87724,
										87732
									],
									[
										87826,
										87834
									],
									[
										87930,
										87938
									],
									[
										87981,
										87989
									],
									[
										88076,
										88084
									],
									[
										88173,
										88181
									],
									[
										88271,
										88279
									],
									[
										88357,
										88365
									],
									[
										88474,
										88482
									],
									[
										88544,
										88552
									],
									[
										88692,
										88700
									],
									[
										88873,
										88881
									],
									[
										89173,
										89181
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"default_dir": "/Users/matthewbrandman/ow_server",
							"detect_indentation": false,
							"incomplete_sync": null,
							"line_numbers": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "models/user.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 647,
						"regions":
						{
						},
						"selection":
						[
							[
								533,
								533
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.doc":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 179.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.sftp":
	{
		"height": 115.0
	},
	"output.unsaved_changes":
	{
		"height": 100.0
	},
	"pinned_build_system": "Packages/Python/Python.sublime-build",
	"project": "express_ow.sublime-project",
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"core/",
				"rushtracker/static/core/mainController.js"
			],
			[
				"index",
				"templates/rushtracker/index.html"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 227.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"finish"
			]
		],
		"width": 392.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 224.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
